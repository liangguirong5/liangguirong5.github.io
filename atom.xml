<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RichardBai&#39;s Note</title>
  <subtitle>NLP水硕在读 | 白塔庵zj的日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/"/>
  <updated>2018-10-12T08:50:25.241Z</updated>
  <id>http://github.com/</id>
  
  <author>
    <name>Richard Bai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IELTS SPEAKING PART-2,3</title>
    <link href="http://github.com/2018/10/12/IELTS_SPEAKING_PART23/"/>
    <id>http://github.com/2018/10/12/IELTS_SPEAKING_PART23/</id>
    <published>2018-10-12T08:22:48.000Z</published>
    <updated>2018-10-12T08:50:25.241Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ieltsbro.com/predict" target="_blank" rel="external">http://www.ieltsbro.com/predict</a></p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="part-2-3"><a href="#Part-2-3" class="headerlink" title="Part 2, 3"></a>Part 2, 3</h1><h2 id="1-丢失的重要物品"><a href="#1-丢失的重要物品" class="headerlink" title="1. 丢失的重要物品"></a>1. 丢失的重要物品</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2464/f5d13858efedec76e29a37dfe9cb3b82.png" alt=""></p>
<h2 id="2-喜剧"><a href="#2-喜剧" class="headerlink" title="2. 喜剧"></a>2. 喜剧</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2456/95839d9b2c31fa3b0574ecd7641e154b.png" alt=""></p>
<h2 id="3-安静的地方"><a href="#3-安静的地方" class="headerlink" title="3. 安静的地方"></a>3. 安静的地方</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2457/2851d1ed9a04e31d02fd78b362b50be1.png" alt=""></p>
<h2 id="4-别人帮忙下作的决定"><a href="#4-别人帮忙下作的决定" class="headerlink" title="4. 别人帮忙下作的决定"></a>4. 别人帮忙下作的决定</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2458/8aa184189d007a81484a3694ccc50cf8.png" alt=""></p>
<h2 id="5-参加过的派对"><a href="#5-参加过的派对" class="headerlink" title="5. 参加过的派对"></a>5. 参加过的派对</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2459/6942a8d37d5618a5b4386c61fd257a75.png" alt=""></p>
<h2 id="6-常用网站"><a href="#6-常用网站" class="headerlink" title="6. 常用网站"></a>6. 常用网站</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2460/722a2ec78abf8c92ba4e14d4270b1f4a.png" alt=""></p>
<h2 id="7-乘坐交通工具旅行"><a href="#7-乘坐交通工具旅行" class="headerlink" title="7. 乘坐交通工具旅行"></a>7. 乘坐交通工具旅行</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2461/a0163353a0bfc8a6d6d7e96613e8bbc7.png" alt=""></p>
<h2 id="8-吃药"><a href="#8-吃药" class="headerlink" title="8. 吃药"></a>8. 吃药</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2462/04cd6a5e032de0799972e486a7536957.png" alt=""></p>
<h2 id="9-第一部手机"><a href="#9-第一部手机" class="headerlink" title="9. 第一部手机"></a>9. 第一部手机</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2463/fd2cf8a3767f4261037d64d2b0b8d73f.png" alt=""></p>
<h2 id="10-独处时的活动"><a href="#10-独处时的活动" class="headerlink" title="10. 独处时的活动"></a>10. 独处时的活动</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2465/4d5c960d93dd0a45b933909920550b94.png" alt=""></p>
<h2 id="11-改变计划"><a href="#11-改变计划" class="headerlink" title="11. 改变计划"></a>11. 改变计划</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2466/49837bf25c8cc4e6a5748e39074a94ca.png" alt=""></p>
<p>##12. 好法律</p>
<p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2467/d776fa33f8339ee86a91c52e354ca92a.png" alt=""></p>
<h2 id="13-花很长时间学习技能"><a href="#13-花很长时间学习技能" class="headerlink" title="13. 花很长时间学习技能"></a>13. 花很长时间学习技能</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2468/e00b40d08a02fb0d5cde1b1df2e70556.png" alt=""></p>
<h2 id="14-坏掉的设备"><a href="#14-坏掉的设备" class="headerlink" title="14. 坏掉的设备"></a>14. 坏掉的设备</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2469/c11a1b7fadbd5d0fbedb4899bcac129a.png" alt=""></p>
<h2 id="15-环保人士"><a href="#15-环保人士" class="headerlink" title="15. 环保人士"></a>15. 环保人士</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2470/e4ed2aa68725c186a3ba6528ef30573c.png" alt=""></p>
<h2 id="16-集中注意力的活动"><a href="#16-集中注意力的活动" class="headerlink" title="16. 集中注意力的活动"></a>16. 集中注意力的活动</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2471/9bdcba595859313d12433856b27fb2cb.png" alt=""></p>
<h2 id="17-家族企业"><a href="#17-家族企业" class="headerlink" title="17. 家族企业"></a>17. 家族企业</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2472/2dd8cf0351fcf8ab866b576fef436b1b.png" alt=""></p>
<h2 id="18-建筑"><a href="#18-建筑" class="headerlink" title="18. 建筑"></a>18. 建筑</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2473/167414993a18626c3addfedf71960d3c.png" alt=""></p>
<h2 id="19-街市"><a href="#19-街市" class="headerlink" title="19. 街市"></a>19. 街市</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2474/54967955870baa202480288a1c30aa7a.png" alt=""></p>
<h2 id="20-借东西"><a href="#20-借东西" class="headerlink" title="20. 借东西"></a>20. 借东西</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2475/fcc263e496c3b77e93c568e016d9381d.png" alt=""></p>
<h2 id="21-开心经历"><a href="#21-开心经历" class="headerlink" title="21. 开心经历"></a>21. 开心经历</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2476/be37299052949c7001b6040d36aad073.png" alt=""></p>
<h2 id="21-看过并想尝试的运动"><a href="#21-看过并想尝试的运动" class="headerlink" title="21. 看过并想尝试的运动"></a>21. 看过并想尝试的运动</h2><p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2478/e614bd92eecb3f7f0f2fcc9b7c6fddb2.png" alt=""></p>
<p>##22. 乐于助人<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2479/145b511d2e1b63ec8ad46c5130366ba2.png" alt=""></p>
<p>##23. 没见过单想多了解的人<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2480/890b3606fd29fa6557d7dffece4dc56a.png" alt=""></p>
<p>##24. 美丽的城市<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2481/aebb5e675afbfe904f404417298b8a0a.png" alt=""></p>
<p>##25. 朋友做过的趣事<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2482/cf882bd0964c19b414fe1c9a635cd993.png" alt=""></p>
<p>##26. 青少年<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2483/d50a31deeac9a1d27a452d908906aa25.png" alt=""></p>
<p>##27. 上网搜信息<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2484/a13c00c2bb149a1968b86742594097c4.png" alt=""></p>
<p>##28. 收到钱做礼物<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2485/fa01eb704179145306a57867fc333c1d.png" alt=""></p>
<p>##29. 数学课学到的技能<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2486/08e434190c4acf920160d68b0a83b0cc.png" alt=""></p>
<p>##30. 特别能说的人<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2487/22545d96972490803ff22533c901a1ec.png" alt=""></p>
<p>##31. 特定场合穿的衣服<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2488/f562caa7392d4fb99c3e7bcb97b75cd2.png" alt=""></p>
<p>##32. 童年的朋友<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2489/c1766c42e3691a40fbed34b97a68a824.png" alt=""></p>
<p>##33. 童年游戏<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2490/be7c80e133254a19faf8618b882609a4.png" alt=""></p>
<p>##34. 投诉<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2491/4e731d9476c19f5169365aadda3b4f2c.png" alt=""></p>
<p>##35. 喜剧演员<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2493/b3578de936e1742cc49d92500d4b9f27.png" alt=""></p>
<p>##36. 想参加的比赛<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2494/387596b133081b5d3d1d81cc277d1f7b.png" alt=""></p>
<p>##37. 想换掉的东西<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2495/6d5f3f86c45bfe4be40e4570f8743c30.png" alt=""></p>
<p>##38. 想见的有趣的人<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2496/9021b12c9c630affc6a51a553177df3c.png" alt=""></p>
<p>##39. 想学的外语<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2497/16aa8cd75027fcec51b2525508216d04.png" alt=""></p>
<p>##40. 学习的地方<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2498/15d889cab406063b89be07e554809319.png" alt=""></p>
<p>##41. 有趣的工作<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2503/51301bf4dd7c39229a5519436ed8e048.png" alt=""></p>
<p>##42. 喜欢的杂志<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2492/e04f3a1e81f6958e847bae0a3d4e7f08.png" alt=""></p>
<p>##43. 一件给你的急需品<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2499/1dd1ea08e04bb20b9a58ab9402ef9d06.png" alt=""></p>
<p>##44. 有趣的地方<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2501/e9e5b5934e0fc7faf3d9983fcbb024d4.png" alt=""></p>
<p>##45. 长途旅行</p>
<p><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2504/b1736671a88753c39e791782a0e06caa.png" alt=""></p>
<p>##46. 有趣的演讲<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2500/95c46d43cc209ae5c2bc80b1b227dcda.png" alt=""></p>
<p>##47. 自制物品<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2506/95c6bf9cd17ab4ece2ffd1a53c81dc63.png" alt=""></p>
<p>##48. 最喜欢的歌<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2508/a531165341081c1e402ffdcd1c0caefb.png" alt=""></p>
<p>##49. 有趣动物<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2502/ec78987221c8d40c77249faa5553c27c.png" alt=""></p>
<p>##50. 重要植物<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2505/17a2f41ab0bd6fd46f21d7de683dafd1.png" alt=""></p>
<p>##51. 最近读的书<br><img src="https://hcp-official-site.oss-cn-shenzhen.aliyuncs.com/uploads/production/web_forecast_image/image/2507/aa96d194bafb9efecbfeb560a1ed3921.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ieltsbro.com/predict&quot;&gt;http://www.ieltsbro.com/predict&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IELTS" scheme="http://github.com/categories/IELTS/"/>
    
    
      <category term="IELTS" scheme="http://github.com/tags/IELTS/"/>
    
      <category term="Speaking" scheme="http://github.com/tags/Speaking/"/>
    
  </entry>
  
  <entry>
    <title>IELTS SPEAKING PART-1</title>
    <link href="http://github.com/2018/10/05/IELTS_SPEAKING_PART1/"/>
    <id>http://github.com/2018/10/05/IELTS_SPEAKING_PART1/</id>
    <published>2018-10-05T14:46:42.000Z</published>
    <updated>2018-10-12T08:21:42.571Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ieltsbro.com/predict" target="_blank" rel="external">http://www.ieltsbro.com/predict</a></p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h1><h2 id="1-being-bored"><a href="#1-Being-bored" class="headerlink" title="1. Being bored"></a>1. Being bored</h2><p><strong>What will you do when you feel bored?</strong></p>
<p>I usually call my boyfriend and have a chat with him when I feel bored. Because he is very humor and we have many topics to talk about which will definitly eliminate the boredom.</p>
<p><strong>When you were young, what would you do if you left bored?</strong></p>
<p> Each time I felt bored, I would play some destop games with my friends. My favourate desktop game is werewolf which is a roles play game and involves analytical ability and presentation skill.</p>
<p><strong>What kinds of things are boring to you?</strong></p>
<p>Attending some weekly report meetings makes me feel very bored. You have to listen to other students’ work reports for several hours which may un-revelvant to you.</p>
<p><strong>Do you think young people are more likely to get bored?</strong></p>
<p>No, I don’t so. Young people are always enthusimastic to nearly everything they meet and less likely to get bored. For example, a very very young people, I mean a child, can play with a chari, a table or other simple object for a whole day without any boredom.</p>
<h2 id="2-cities"><a href="#2-Cities" class="headerlink" title="2. Cities"></a>2. Cities</h2><p><strong>Do you like the city you are living in now?</strong></p>
<p>  love it very much fot its convenient transportation. There are many kinds of vehicles here including sharing bicycles, buses, subwaya, trails and even sharing cars. You can go anywhere you want and save lots of time comparing with the other cities.</p>
<p><strong>Which city have you been to recently?</strong></p>
<p>The city I have been to recently is the Harbin, the captial city of Heilongjiang Province. It located in the north-east of China and is famous for its winter scenary. I visited this city for several days and I love it very much.</p>
<p><strong>Do you prefer the city or the countryside?</strong></p>
<p>I perfer the city for the convenient transpotation and delicious restaurant, which cannot be found in contrysides. Besides, in big cities, you can work in great companies with great people, while in the contrysides, </p>
<p><strong>What kind of cities do you like?</strong></p>
<p>I like cities like Seattle and Mountain View as there are many great companies there such as Micrisoft and Google. I always dream about working in these companies with great people. I think I can learn from them a lot.</p>
<p><strong>Which city do you want to go to?</strong></p>
<p>The city I want to go is Seattle. My mentor in the company I interned last year was a professor in Washington University and she told me that Seattle is much more different from Beijing and I want to visit it next year.</p>
<h2 id="3-color"><a href="#3-Color" class="headerlink" title="3. Color"></a>3. Color</h2><p><strong>What’s your favourite color?</strong></p>
<p>My favouriate color is White. Because white color looks clean and a more important reason is that the translation of my Chinses family name is white.</p>
<p><strong>Do you like dark colors?</strong></p>
<p>It depends. Some dark colors are aslo looks beautiful. For example, the very popular TV series named yanxigonglue choose dark colors for the actors’ clothes and looks excellent.</p>
<p><strong>Are there any colors you dislike?</strong></p>
<p>I don’t like some bright color, like bright red and bright green. These colors looks cheap and normal. I don’t like these colors.</p>
<p><strong>Do you usually wear clothes in your favourite color?</strong></p>
<p>Of course. I believe no one would like to wear any clothes whose colors they don’t like. For me, I like white and some dark color, so I usually wear white T-shirts with blue jeans and white sneakers.</p>
<h2 id="4-cooking"><a href="#4-Cooking" class="headerlink" title="4. Cooking"></a>4. Cooking</h2><p><strong>Have you ever cooked?</strong></p>
<p>Yes, of course. I always cook by myself when my parents are not at home. You know, cook for dinner or lunch.</p>
<p><strong>Do you like cooking?</strong></p>
<p>Yes, I like cooking very much. I love delicious foods and cooking has the magic to transfer those original materials like vegetable and meat into complicated and delicious food. It is really fantastic.</p>
<p><strong>Do you want to learn how to cook?</strong></p>
<p>Yes, of course. I still remember that when I was a child, I was eagerring to cook by myself each time my parents cooked. I love cooking very much now. I don’t think cooking is a difficult skill to learn.</p>
<p><strong>Is it difficult to cook Chinese food for you?</strong></p>
<p>No. Absolutely not. I have to admit that Chinese food is more complicate than some foreign food for its complex recipe. But it is easy to learn because cooking Chinese food need less tools. I believe those tools are hard to learn.</p>
<h2 id="5-drink-water"><a href="#5-Drink-water" class="headerlink" title="5. Drink water"></a>5. Drink water</h2><p><strong>How often do you drink water?</strong></p>
<p>It’s hard to say the exactly frequency. I ususally drink every time when I feel thirsty. Maybe one cup one hour, approximately. </p>
<p><strong>What kind of water do you like to drink?</strong></p>
<p> I like to drink boiled water as there are no bacterias in it. I also perfer warm water to cold water. I believe it good my stomach.</p>
<p><strong>Do you drink bottled water or water from water machines?</strong></p>
<p>I drink bottled water when travelling in other cities as it is very convenient for carrying and it is safe to drink compared with local water. But it is expensive and not environment friendly. So I always drink water from water machines in school and company.</p>
<h2 id="6-foreign-food"><a href="#6-Foreign-food" class="headerlink" title="6. Foreign food"></a>6. Foreign food</h2><p><strong>Have you ever tried foreign food?</strong></p>
<p>Certainly, and I often do that. With the interconnected world, we get to learn more about other country’s cuisines and there are aslo lots of resteraunts around to help staisfy that desire.</p>
<p><strong>Do you like to try new food?</strong></p>
<p>Yes, of course. I like to try new dishes or cuisines as they alway bring me suprise, although including both positive and negative. I means, you may encounter sth you dislike, but that’s part of the experience.</p>
<p><strong>What kinds of new food have you tried recently?</strong></p>
<p>Mexico food. It is so spicy and hot that I don’t like. But its seafoods are really delicious.</p>
<p><strong>What kinds of foreign food are popular in China?</strong></p>
<p>Japanese food, Korea food and European food. These three are the most popular foreign foods in China. And you can find them in any big city.</p>
<p><strong>Do you like any food from the contries near China?</strong></p>
<p>Yes, I like Japanese food very much, especially the raw fish.</p>
<h2 id="7-gift"><a href="#7-Gift" class="headerlink" title="7. Gift"></a>7. Gift</h2><p><strong>How often do you buy others gifts?</strong></p>
<p>Occasionally. Only on some special days like Chrismas, Chinese spring festival or my friends’ birthdays and so on. </p>
<p><strong>Do you like to send expensive gifts?</strong></p>
<p>No, I don’t. In my opinion, gifts are something you sending to others to convey the message you like them. So values are not matter, the gifts matter.</p>
<p><strong>What kinds of gifts are popular in your country?</strong></p>
<p>It depends on the target group. Wallets for men, perfume for women,  lego for children and wines for old men.</p>
<p><strong>Why do people send gifts?</strong></p>
<p>Many purposes. For me, I send gift to convey the message that I like someone. But there aslo some people sending gifts for bribery. It is hard to list all the purposes. </p>
<h2 id="8-holiday"><a href="#8-Holiday" class="headerlink" title="8. Holiday"></a>8. Holiday</h2><p><strong>What kinds of places do you like to go on holiday?</strong></p>
<p>Well, I love travelling, so I would like to go to some places of interest on holiday. I aslo like visit museums in other cities, where i can learn from their histories.</p>
<p><strong>Who would you like to go on holiday with?</strong></p>
<p>My parents. In this society, everyone has limited holiday each year and has less time with our family. For example, I have to study in this city which is far away from my hometown. Thus I would like to go on holiday with my family.</p>
<p><strong>Where do you plan to go for holidays in the future?</strong></p>
<p>In the future, I want to go to European countries, for example Italy, France, Norway, Fenland and England. Because these countrie are famous for the long histories and the great landscapes. </p>
<h2 id="9-home"><a href="#9-Home" class="headerlink" title="9. Home"></a>9. Home</h2><p><strong>What kind of housing/accommodation do you live in?</strong></p>
<p>I live in the dormatory of my school.</p>
<p><strong>Do you live in a house or a flat?</strong></p>
<p>It is a flat.</p>
<p><strong>What’s the difference between where you are living now and where you have lived in the past?</strong></p>
<p>Now, I am living in a room together with my roomate. While last year, I was living in a single room . This is the mainly difference.</p>
<p><strong>Can you describe the place where you live?</strong></p>
<p>I live in this city Beijing, which is the captial of China and is famous for its long history and places of interest.   </p>
<p><strong>Which room does your family spend most of the time in ?</strong></p>
<p>The living room. Because they like computer games and Xbox games and the television and computer are in the living room. </p>
<p><strong>How long have you lived there?</strong></p>
<p>Only one year. I move in this dorm last autumn.</p>
<p><strong>What do you usually do in your house/flat/room?</strong></p>
<p>Sleep. I seldom stay in my room during daytime as there are no wifi in my room.</p>
<p><strong>Do you plan to live there for a long time?</strong></p>
<p>No, I will not live here util I finish my post-graduate study and I plan to move into a big house in the future.</p>
<p><strong>Are the transport facilities to your home very good?</strong></p>
<p>Yes, a subway station is in the walking distance from my home. And bus station is more close to where I live. I am satisfied with the transprotation around my home.</p>
<p><strong>Please describe the room you live in?</strong></p>
<p>I am living in a domitory with my roomate. Our domitory only consists of  a washing room and a bedroom with two beds and two desks.</p>
<p><strong>Do you prefer living in a house or a flat?</strong></p>
<p>I prefer living in a house. Because you don’t need to wait for elevators and the room is usually bigger than a flat. Besides, you can have a garden or swimming pool with a house.</p>
<p><strong>What part of your home do you like the most?</strong></p>
<p>The bathroom. We have 24 hours hot water so I can have a hot shower anytime I want. It is really convenient and I like it.</p>
<h2 id="10-hometown"><a href="#10-Hometown" class="headerlink" title="10. Hometown"></a>10. Hometown</h2><p><strong>What’s your hometown?</strong></p>
<p>My hometown is Baiquan, a country of Heilongjiang Province and located in the north-east of China.</p>
<p><strong>Is that a big city or a small place?</strong></p>
<p>It is a small place and you can travel around this town with a car in 10 minues.</p>
<p><strong>How long have you been living there?</strong></p>
<p>About 18 years. Before I went to my university which is far from my hometown.</p>
<p><strong>Do you like your hometown?</strong></p>
<p>No, I don’t like it comparing with where I live now. My hometown is too cold in winter. Besides, there are little entertainment facilities, I mean, underdevelopment.</p>
<p><strong>What do you like about your hometown?</strong></p>
<p>The air condition and the scenic beauty. My hometown is famou for its wetland and trees in China. You can find lots of animals and birds in my hometown’s countrysides. I love them.</p>
<p><strong>Do you like living there?</strong></p>
<p>No, I don’t. My hometown is too cold and dry in winter I have to stay indoor and have less activities during the whole winter.</p>
<p><strong>Please describe your hometown a little.</strong></p>
<p>My hometown Baiquan is a small country in the north-east of China. The weather there is much like Russia, with a long and cold winter. No industries and big companies are there and there are lots of wetland around this country. Thus my hometown is famous for its scenic beauty and farm products.</p>
<p><strong>Do you think you will continue living there for a long time?</strong></p>
<p>No, I don’t. Because I am majoring in computer science and I want to have a job in a big company. My hometown is too small although with great scenery.</p>
<h2 id="11-letters"><a href="#11-Letters" class="headerlink" title="11. Letters"></a>11. Letters</h2><p><strong>Do you write many letters?</strong></p>
<p>Yes, I usually write e-mails. It is really convenient to use  compared with other tools. Especially when you communicate with your mentor or boss, as they are very busy and they can reply your email when they are free.</p>
<p><strong>Do you prefer to write letters by hand or to use a computer?</strong></p>
<p>Computer. I seldom write paper letters.</p>
<p><strong>What do you usually write about?</strong></p>
<p>Well, I am a post-graduate student and I usually write email to my supervisor to discuss my work and my paper. I aslo write emails to apply for schorlarships or some other prizes.</p>
<p><strong>Who do you usually write to ?</strong></p>
<p>My supervior. Also my mentor during the time I was an internship in a company.</p>
<p><strong>Is it hard to think of what to write?</strong></p>
<p>No, it is not. I know what I want to express and I don’t think this is a problem for me.</p>
<p><strong>How do you feel when you receive a letter?</strong></p>
<p>I feel curiosity as I want to figure out what content inside this letter.</p>
<p><strong>Do you think people will still write letters in the future?</strong></p>
<p>Yes, of course. We need both instant messaging like wechat and non-real time messaging like email. </p>
<h2 id="12-maps"><a href="#12-Maps" class="headerlink" title="12. Maps"></a>12. Maps</h2><p><strong>Do you often use maps?</strong></p>
<p>Yes, I have a very poor sense of direction and I have to use maps for navigation.</p>
<p><strong>Who taught you how to use a map?</strong></p>
<p>My father. The fisrt map I have is a birthday gift my father give me. He taught me how to read and user this map hand by hand.</p>
<p><strong>Do you prefer electronic map or paper maps?</strong></p>
<p>Electonic map. Because it is much more convenient than paper maps. Just download one app to your mobile phone and the map of the whole world is in your hands.</p>
<h2 id="13-morning-routine"><a href="#13-Morning-routine" class="headerlink" title="13. Morning routine"></a>13. Morning routine</h2><p><strong>What do you do in the morning?</strong></p>
<p>Wake up first, then brush my teeth, wash my hair, dress up and go out for breakfast.</p>
<p><strong>Is breakfast important?</strong></p>
<p>Yes, it is. I have breakfast everyday. It can provides energy for my study and work.</p>
<p><strong>What is your morning routine?</strong></p>
<p>Wake up first, then brush my teeth, wash my hair, dress up and go out for breakfast. After that, I will go to my lab and do my research work.</p>
<p><strong>Do you like to get up early in the morning?</strong></p>
<p>No, I don’t. Getting up early will make me sleepy and inefficient in the morning. I need enough sleep time.</p>
<h2 id="14-movies"><a href="#14-Movies" class="headerlink" title="14. Movies"></a>14. Movies</h2><p><strong>Do you watch movies?</strong></p>
<p>Yes, of course. I love watching movies.</p>
<p><strong>How often do you watch movies?</strong></p>
<p>About once a month. Everytime my favouriate actors or directors release a new movies, I will go watch.</p>
<p><strong>What kinds of movies do you like?</strong></p>
<p>Romantic movies like la la land, tatanic and before I meet you. These romantic movies give me a feeling of touching my soul and my heart. I love such fantastic feeling.</p>
<p><strong>Do you prefer to go to a movie along or with others?</strong></p>
<p>I like go to a movie with my friends. We can remind each other of the begin time of the movie and have a discussion after watching that movie.</p>
<p><strong>Do you prefer to watch movies at home or in a cinema?</strong></p>
<p>In a cinema. With the rapid development of technology, more and more 3D movies appear in the film market. These films need professional devices to play and go to cinema is a wise choice.</p>
<h2 id="15-music"><a href="#15-Music" class="headerlink" title="15. Music"></a>15. Music</h2><p><strong>When do you listen to music?</strong></p>
<p>I listen to music when I fell stressful or when the environment around me is noisy. Music can help me focus on the things at hand.</p>
<p><strong>How much time do you spend listening to music every day?</strong></p>
<p>About 3 hours. One hour in the morning, one hour in the afternoon and one hour befor sleep.</p>
<p><strong>What kinds of music do you like to listen to?</strong></p>
<p>Pop music, contry music and electro music.</p>
<p><strong>What’s your favorite kind of music?</strong></p>
<p>Pop music. I love pop music so much. Many of my favorite music artists like Taylor Swift, Ed Sherren, and Jason Marz are famous for their pop music.</p>
<p><strong>Have you ever been to a concert before?</strong></p>
<p>No, I haven’t. It is too expensive for me. Maybe I should have a try in the future.</p>
<h2 id="16-patintings"><a href="#16-Patintings" class="headerlink" title="16. Patintings"></a>16. Patintings</h2><p><strong>What do you know about paintings?</strong></p>
<p>Little.</p>
<p><strong>Have you learned drawing or painting?</strong></p>
<p>Yes, I have. When I was in primary school, I learned the classical Chinese painting with only black ink on white papaer.</p>
<p><strong>Is it important to hang pictures at home?</strong></p>
<p>Yes, it is. Pictures are important components for decorating our home, especially the bare walls.</p>
<p><strong>What kind of paintings do you like?</strong></p>
<p>Ink landscape painting, which is a famous genre of classical Chinese painting. This kind of painting can convey complicate information with only on color, I mean the black ink. Unbeliveable!</p>
<p><strong>If someone wants to draw a picture of you, will you agree?</strong></p>
<p>Yes, I will. Because no one has ever asked me for that.</p>
<h2 id="17-park-or-garden"><a href="#17-Park-or-garden" class="headerlink" title="17. Park or garden"></a>17. Park or garden</h2><p><strong>Are public parks very important in China?</strong></p>
<p>Yes, it is. Public parks may help to purify the air as well as provide us a good place for relaxing, exercising and jogging. </p>
<p><strong>Are there many public gardens in China?</strong></p>
<p>Yes, there are many parks in China. These parks are with different themes, including plants park with many species of plants and water park with many water activities.</p>
<p><strong>Do you think there are enough public gardens or parks in your hometown?</strong></p>
<p>No, I don’t think so. My hometown is a small country and have only one forest park.</p>
<p><strong>What do you think are the benefits of having gardens in the city?</strong></p>
<p>Gardens can purify the air and provide us a chance to get close to the nature. Besides, they provide us a good place for entertainment.</p>
<p><strong>Why do people who live in cities like public gardens?</strong></p>
<p>Because cities are full of human made architechtures which results in the distance from natural environment. And public gardens provide such simulate environments to us, thus people live in cities like public parks.</p>
<h2 id="18-photos"><a href="#18-Photos" class="headerlink" title="18. Photos"></a>18. Photos</h2><p><strong>Do you like to take photos?</strong></p>
<p>Yes, of course. I a big fan of photography in my spare time. The reason is very simple, I take pictures to remember the places I went to, the people I met and the scenery I enjoyed.</p>
<p><strong>Do you prefer to take photos yourself or to have other people take photos?</strong></p>
<p>I perfer to take photos by myself. As I can see what I look through the screen and justify the parameters of the capture for a better performance.</p>
<p><strong>How often do you take photos?</strong></p>
<p>Nearly everyday. </p>
<p><strong>In what situations do you take photos?</strong></p>
<p>I often take photos during classes, which is helpful for notes taking. I aslo take photos in restaurants in order to write review on Dazhongdianping, which is the Chinses version of Yelp.</p>
<p><strong>How do you keep your photos?</strong></p>
<p>I keep them in my icloud storage space. I can browse my photos online and download them anytime I need them with any devices connected to the Internet.</p>
<h2 id="19-plants"><a href="#19-Plants" class="headerlink" title="19. Plants"></a>19. Plants</h2><p><strong>Do you keep plants at home?</strong></p>
<p>Yes. I have some potted plants on the balcony which is a good place for taking care of them. </p>
<p><strong>What plant did you grow when you were young?</strong></p>
<p>Strawberries. I grow them with my sister who is 3 years older than me. She give me the seeds and help me water them. I still remember the final results, I mean the strawberrtires, were quite small but sweet</p>
<p><strong>Do you know anything about growing a plant?</strong></p>
<p>Yes, a little. It is better to spread seeds In the begining of spring, suplying adequate temperature and humidity condition. After sprouting, watering frequency is more important.</p>
<p><strong>Do Chinese people send plants as gifts?</strong></p>
<p>Yes, we do. We send flowers on Valentine’s Day, Teacher’s Day and Mother’s Day. Besides, If our friends revovered from the diseases, we will send them plants to celebrate as plants represents vitality.</p>
<h2 id="20-rainy-days"><a href="#20-Rainy-days" class="headerlink" title="20. Rainy days"></a>20. Rainy days</h2><p><strong>Does it rain much in China?</strong></p>
<p>It depends. It rains a lot in south-east of China, beacause such regions are near from the pacific ocean. When it comes to the west of China, the weather is dry and hot. It rains little.</p>
<p><strong>Is there any part of China where it doesn’t rain much?</strong></p>
<p>Yes, there is. The west and north part of China rain little as they are far away from oceans.</p>
<p><strong>When does it rain most in your hometown?</strong><br>In Summer. My hometown is located in the temperiate monsoon climate zone, it has warm and moist summer and dry and cold winter.</p>
<p><strong>In which season does it rain most in other parts of China?</strong></p>
<p>It is aslo summer to my best of knowledge.</p>
<p><strong>Can you remember any time when it rained particular heavily in your hometown?</strong></p>
<p>Yes. I still rembember that it was a sunny morning, when I was seven years old,  and I planned to go to a movie with my best friends. However, it rained suddenly and heavily that afternoon. And we had to re-arrangement our plan.</p>
<h2 id="21-save-money"><a href="#21-Save-money" class="headerlink" title="21. Save money"></a>21. Save money</h2><p><strong>Did  you save money when you were young?</strong></p>
<p>Yes, I remember I did that when I was in high school. I have save money for nearly two semesters to buy the iphone 6. I cut off all the unnecessary expenses and eat as less as possible.</p>
<p><strong>Have you ever given money to other children?</strong></p>
<p>Yes, i have. It was about one years ago. When I was in a subwat station, a pity boy was begging for some money. He looked very hungry and seemed like eat nothing for several days. So I gave him some money and this is the first time I give money to other children.</p>
<p><strong>Do you think parents should teach children to save money?</strong></p>
<p>Yes, I do. Saving money is an important skill for children and if their parents don’t teach them, they will waste their money on many usefulness things. For exapmle, when I was a children, I spended lots of money on toys.</p>
<p><strong>Do parents give children pocket money in China?</strong></p>
<p>Yes, they do. Parents give pocket money to children for many purposes. They may need that money for lunch or drinks. If they got lost, they can call a taxi to home. So, the pocket money is important.</p>
<h2 id="22-shoes"><a href="#22-Shoes" class="headerlink" title="22. Shoes"></a>22. Shoes</h2><p><strong>How  often do you buy shoes?</strong></p>
<p>It depends, maybe three weeks a pair. Because I love play football and I always scuff up my shoes. Besides, I love the white shoes, however I am too lazy to wash them. Once they got dirty, I want to buy a new one. </p>
<p><strong>Have you ever bought shoes online?</strong></p>
<p>Yes, of course. I often but shoes online as the competitive price. You know, in china, e-commerce is very popular and you can buy almost everything online, including shoes. That’s very convenient.</p>
<p><strong>Do you know anyone who likes to buy a lot of shoes?</strong></p>
<p>Yes. I want to talk about my friend Sun. He love to buy and collect shoes. I mean all kind of shoes including sneakers, trainers and so on. I have asked him the reason but he didn’t tell me. I guess such habit is similar with stamps collecting.</p>
<p><strong>What’s your favorite type of shoes?</strong></p>
<p>I believe it will be the sneaker! I love sneakers very much as they looks so cool. You can choose any color you like. Besides, sneaks are comfortable compared with the other types of shoes. You can wear sneakers for hiking or go to the gym if you like.</p>
<h2 id="23-sports"><a href="#23-Sports" class="headerlink" title="23. Sports"></a>23. Sports</h2><p><strong>Do you like to watch sports on TV?</strong></p>
<p>Yes, I do. I like watching basketball game on TV because each player is struggling to win the game. It is really inspiring as life is like a basketball game, no pain no gain.</p>
<p><strong>Do you play any sports?</strong></p>
<p>Yes, I do. I like ping-pong. It is a very popular sports game in my hometown. I learn it when I was eight years old, taught by my father.</p>
<p><strong>Do you have a favorite sports star?</strong></p>
<p>Yes, I have. My favorite sports star is Malin, who is famous for his super talent on pingpang games and he  has won gold medals in the Olympic Games many times.</p>
<p><strong>What kinds of sports are popular in China?</strong></p>
<p>Basketball, swimming, ping-pong and so on. Students like basketball and adults are prefer swimming, while old men like ping-pong game.</p>
<p><strong>What kinds of sports would you like to try in the future?</strong></p>
<p>Swimming. Many of my friends go swimming on weekends and i hope to join them in the future as swimming is a pressure reduced sport.</p>
<h2 id="24-sunglasses"><a href="#24-Sunglasses" class="headerlink" title="24. Sunglasses"></a>24. Sunglasses</h2><p><strong>Do you like to wear sunglasses?</strong></p>
<p>Well, I think not so often. Because there are few sunny days in my living city, the sunglasses seems not so useful. But when I travel to orther cities, I wil pack the sunglasses in my bag.</p>
<p><strong>Where can you buy sunglasses?</strong></p>
<p>We can buy sunglasses anywhere, I means either shopping malls, or online shops. Personally, I prefer online shopping for it is convenient and I can have more choice. As they provide 7-days free returning policy, I feel free to make orders.</p>
<p><strong>Do people in your country wear sunglasses?</strong></p>
<p>Well, to be honest, I didn’t notice this before. But in my experience, in my hometown, young people would like to wear sunglasses. Because wearing sunglasses can help them look gorgeous and fashionable.</p>
<h2 id="25-teachers"><a href="#25-Teachers" class="headerlink" title="25. Teachers"></a>25. Teachers</h2><p><strong>Do you have a favorite teacher?</strong></p>
<p>Yes. My favorite teacher is my high school math teacher. She is very young, about 25 years old, so there is no generation gap between us and she is very patient to every student and every question.</p>
<p><strong>Do you think teachers should be angry at students or not?</strong></p>
<p>Well, to be honest, I don’t think teachers should mad at their students they should find a more scientific approach to educate their students, like encouraging instead of just yelling.</p>
<p><strong>Do you want to be a teacher in the future?</strong></p>
<p>No, I don’t  want to be a teacher in the future. Because I can easily get annoyed and disturbed by kids from my family, so How can i deal with a bunch of them?</p>
<p><strong>What kinds of teachers do you like?</strong></p>
<p>Personally, I prefer the teacher with a good sense of humor, who is good at telling funny stories in his classes. I mean such teachers can educate their students with interesting examples.</p>
<p><strong>Can you describe your high school teacher?</strong></p>
<p>Well, the high school teacher I want to talk about is my math teacher. She is very young compared with other teachers, about 25 years old, so there is no genereation gap between us. Besides, she is vert patient and always willing to answer every question even trivial questions. She is my favouriate teacher.</p>
<p><strong>What’s the different between young and old teachers?</strong></p>
<p>Well, in my opinion, old teachers have more experience in teaching students and they are good at finding scientific approaches for educating students. While the young teachers may have more  common topics with students, as the generation gap between young teachers and students is much smaller.</p>
<h2 id="26-transportation"><a href="#26-Transportation" class="headerlink" title="26. Transportation"></a>26. Transportation</h2><p><strong>What’s the most popular means of transportation in your hometown?</strong></p>
<p>Well, I suppose it will be the taxis. Because my hometown is a small country and you can travel around it in half an hour. There are no buses there and the price of taxis is very cheap for the short distance, so people prefer taxis.</p>
<p><strong>Can you compare the advantages of planes and trains?</strong></p>
<p>Well, in my opinion, planes are much faster and more expensive than trains. People prefer planes for overseas traveling. However, trains are more punctual, I mean planes are easy to be late for several hours due to weather or something else, while trains are seldom late.</p>
<p><strong>How often do you take buses?</strong></p>
<p>I seldom take buses. I prefer the subway as the traffic volume is high in this city and the subway usually faster than buses.</p>
<p><strong>Is driving to work popular in your country?</strong></p>
<p>No, some people drive to work but there is so much traffic that it can actually be faster to take public transport. So , most people would choose the public transport.</p>
<p><strong>Do you think perple will drive more in the future?</strong></p>
<p>Yes, these days, more people have their own cars than in the past, so driving to work is definitely becoming more popular.</p>
<p><strong>Would you ride bikes to work in the future?</strong></p>
<p>Yes, i would ride bikes if I am not far away from my work place. As riding is a healthy and environmental friendly transportation.</p>
<p><strong>Do you prefer public transportation or private transportation?</strong></p>
<p>I prefer private transportation. I can set off anytime you want, while public transportation is not. Besides, I can carry on my friends or family together, and chat freely. While on the public transportation, I have to keep quiet to avoid disturbing others.</p>
<p><strong>What will become the most popular means of transportation in China?</strong></p>
<p>Subway. Because the traffic volume is high in china, espically in some big cities like Beijing. And the subway is fast, puntual and economical. I believe it will become more and more popular in the future.</p>
<h2 id="27-watch"><a href="#27-Watch" class="headerlink" title="27. Watch"></a>27. Watch</h2><p><strong>How often do you wear a watch?</strong></p>
<p>Nearly everyday. I usually wear my watch when I go out as my watch can record my activities like steps, walking distance, flights climbed and so on. These data is important for me.</p>
<p><strong>What was your first watch like?</strong></p>
<p>My first watch is the apple watch series 3. This watch has a square shape and silver color with a   rubber watchband.</p>
<p><strong>What kinds of watches do you like to wear?</strong></p>
<p>I like smart watches as they can record many data of my body like heart rate, steps and so on. Besides, they can remind me of exercising and not sitting for long time. These functions are really helpful to me.</p>
<p><strong>Do peopel still wear watches in your country?</strong></p>
<p>Yes. These days, more and more people choose to wear smart watches like apple watch and android watch instead of machanical watches. I think this is a trend and will keep continuing in the future.</p>
<h2 id="28-weather"><a href="#28-Weather" class="headerlink" title="28. Weather"></a>28. Weather</h2><p><strong>What kind of weather is typical in your hometown?</strong></p>
<p>It denpends on different seasons. My hometown is located in the temperiate monsoon climate zone, it has warm and moist summer, dry and cold winter and there are many cloudy days in the spring and the autumn.</p>
<p><strong>Do you prefer dry or wet weather?</strong></p>
<p>I prefer wet weather as my skin is the dry type and wet weather makes me feel more comfortable than dry weather. </p>
<p><strong>What kinds of weather do you like most?</strong></p>
<p>My favoriate wether is the snowing day. After the snow, the whole world turns white and I can play snow like fighting with my friends or making snowman. I love these snow activities and I love snowing day.</p>
<p><strong>What’s your favorite season?</strong></p>
<p>Well, As I just said, I love snowing day, so my favoriates season is winter. I can not only play snow games, but aslo go skating, which is one of my favouriate sports.</p>
<h2 id="30-work-or-study"><a href="#30-Work-or-Study" class="headerlink" title="30. Work or Study"></a>30. Work or Study</h2><p><strong>What subjects are you studying?</strong></p>
<p>I am learning natural language processing, mainly focus on the dialogue system, like Apple Siri and Microsoft Cortana. </p>
<p><strong>Do you like your subject?</strong> <strong>Is it very interesting?</strong></p>
<p>Yes, I like this subject and it is very interesting. My previous work is to transfer to dialogue system from one language to other language. </p>
<p><strong>Why did you choose that subject?</strong></p>
<p>The most important reason is that this subject is related to the artifical intelligence and is very popular in these days. Choossing such subject can help me to find a good job in the future. </p>
<p><strong>Do you prefer to study in the mornings or in the afternoons?</strong></p>
<p>I prefer to study in the afternoons. As I usually wake up at 9 o’clock and go lab at 10 o’clok in the morning, the morning is too short for me to learning </p>
<p><strong>Are you looking forward to working?</strong></p>
<p>No, I don’t. Personally, I think there are much time to work in the furture while the time in the shcool or university is limited. Besides, if I go to work, I will have less personal time. So i am not looking forward to working.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ieltsbro.com/predict&quot;&gt;http://www.ieltsbro.com/predict&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IELTS" scheme="http://github.com/categories/IELTS/"/>
    
    
      <category term="IELTS" scheme="http://github.com/tags/IELTS/"/>
    
      <category term="Speaking" scheme="http://github.com/tags/Speaking/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-array</title>
    <link href="http://github.com/2018/05/22/leetcode-array/"/>
    <id>http://github.com/2018/05/22/leetcode-array/</id>
    <published>2018-05-22T07:19:37.000Z</published>
    <updated>2018-05-27T16:48:22.010Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="36-valid-sudoku"><a href="#36-Valid-Sudoku" class="headerlink" title="36 Valid Sudoku"></a>36 Valid Sudoku</h1><p>先逐行检验，再逐列检验，最后分块检验</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution36</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type board: List[List[str]]</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">            used=[]</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">                <span class="keyword">if</span> self.check_used(board[i][j],used):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            used=[]</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">                <span class="keyword">if</span> self.check_used(board[j][i],used):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">                used = []</div><div class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> range(i*<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">3</span>):</div><div class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> range(j*<span class="number">3</span>,j*<span class="number">3</span>+<span class="number">3</span>):</div><div class="line">                        <span class="keyword">if</span> self.check_used(board[row][col],used):</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_used</span><span class="params">(self,value,used)</span>:</span></div><div class="line">        <span class="keyword">if</span> value==<span class="string">'.'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> used:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            used.append(value)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h1 id="42-trapping-rain-water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42 Trapping Rain Water"></a>42 Trapping Rain Water</h1><p>直观的解决方案是模拟雨水降落后从低往高升的过程，即从底向上逐层计算每一层能储存的雨水量。</p>
<p>后来又看了下别人的做法，不是从下到上，而是利用highest bar将数组分为两组，从而从左到highest、从右到highest各遍历一次即可，时间复杂度O(n)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution42</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type height: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        total = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> len(height)&lt;=<span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> total</div><div class="line">        highest = max(height)</div><div class="line">        highest_index = height.index(highest)</div><div class="line">        peak = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> height[:highest_index]:</div><div class="line">            <span class="keyword">if</span> i &gt; peak:</div><div class="line">                peak = i</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                total += peak-i</div><div class="line"></div><div class="line">        peak = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> height[highest_index+<span class="number">1</span>:][::<span class="number">-1</span>]:</div><div class="line">            <span class="keyword">if</span> i &gt; peak:</div><div class="line">                peak = i</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                total += peak-i</div><div class="line">        <span class="keyword">return</span> total</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap_bottom2top</span><span class="params">(self, height)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type height: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        total = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> len(height) &lt;= <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> total</div><div class="line">        highest = max(height)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(highest):</div><div class="line">            left = self.bar_index(height)</div><div class="line">            right = len(height)-self.bar_index(height[::<span class="number">-1</span>])<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> right-left&lt;=<span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> total</div><div class="line">            dec = min(height[left], height[right])</div><div class="line">            total += (right-left<span class="number">-1</span>)*dec</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> height[left+<span class="number">1</span>:right]:</div><div class="line">                <span class="keyword">if</span> j&gt;<span class="number">0</span>:</div><div class="line">                    total -= min(j,dec)</div><div class="line">            height = [x-dec <span class="keyword">for</span> x <span class="keyword">in</span> height]</div><div class="line">        <span class="keyword">return</span> total</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_index</span><span class="params">(self,bars)</span>:</span></div><div class="line">        <span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(bars):</div><div class="line">            <span class="keyword">if</span> i &gt;<span class="number">0</span>:</div><div class="line">                <span class="keyword">return</span> index</div><div class="line">        <span class="keyword">return</span> len(bars)</div></pre></td></tr></table></figure>
<h1 id="48-rotate-image"><a href="#48-Rotate-Image" class="headerlink" title="48 Rotate Image"></a>48 Rotate Image</h1><p>先转置，在水平翻转</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution48</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, matrix)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :rtype: void Do not return anything, modify matrix in-place instead.</div><div class="line">        """</div><div class="line">        <span class="comment"># transpose</span></div><div class="line">        m = len(matrix)</div><div class="line">        n = len(matrix[<span class="number">0</span>])</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</div><div class="line">                matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]</div><div class="line">        <span class="comment"># vertical central line</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n//<span class="number">2</span>,n):</div><div class="line">                matrix[i][j],matrix[i][n-j<span class="number">-1</span>] = matrix[i][n-j<span class="number">-1</span>], matrix[i][j]</div></pre></td></tr></table></figure>
<h1 id="66-plusone"><a href="#66-plusOne" class="headerlink" title="66 plusOne"></a>66 plusOne</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution66</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type digits: List[int]</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        ans = digits.copy()</div><div class="line">        inc = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(digits)+<span class="number">1</span>):</div><div class="line">            sum = digits[-i]+inc</div><div class="line">            inc = sum//<span class="number">10</span></div><div class="line">            new_last = sum%<span class="number">10</span></div><div class="line">            ans[-i] = new_last</div><div class="line">        <span class="keyword">if</span> inc==<span class="number">1</span>:</div><div class="line">            ans.insert(inc,<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h1 id="70-climbing-stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70 Climbing Stairs"></a>70 Climbing Stairs</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution70</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        每次可以一步也可以两步</div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        nm2 = <span class="number">0</span></div><div class="line">        nm1 = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            temp = nm2+nm1</div><div class="line">            nm2=nm1</div><div class="line">            nm1=temp</div><div class="line">        <span class="keyword">return</span> nm1</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;36-valid-sudoku&quot;&gt;&lt;a href=&quot;#36-Valid-Sudoku&quot; class=&quot;headerlink&quot; title=&quot;36 Valid Sudoku&quot;&gt;&lt;/a&gt;36 Valid Sudoku&lt;/h1&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://github.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://github.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://github.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode20-40</title>
    <link href="http://github.com/2018/01/04/leetcode20-40/"/>
    <id>http://github.com/2018/01/04/leetcode20-40/</id>
    <published>2018-01-04T10:22:08.000Z</published>
    <updated>2018-01-05T01:11:50.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21-merge-two-sorted-lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</div></pre></td></tr></table></figure>
<h2 id="python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"><span class="comment">############ iteration #################</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        temp=ans=ListNode(<span class="number">0</span>)</div><div class="line">        <span class="keyword">while</span>(l1 <span class="keyword">and</span> l2):</div><div class="line">            v1 = l1.val</div><div class="line">            v2 = l2.val</div><div class="line">            <span class="keyword">if</span> v1&lt;v2:</div><div class="line">                temp.next = ListNode(v1)</div><div class="line">                l1 = l1.next</div><div class="line">                temp=temp.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp.next = ListNode(v2)</div><div class="line">                l2 = l2.next</div><div class="line">                temp=temp.next</div><div class="line">        <span class="keyword">if</span> l1:</div><div class="line">            temp.next = l1</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            temp.next=l2</div><div class="line">        <span class="keyword">return</span> ans.next</div><div class="line"> <span class="comment">############ recursion #################</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> l2</div><div class="line">        <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> l1</div><div class="line">        <span class="keyword">elif</span> l1.val&lt;l2.val</div><div class="line">        	l1.next = mergeTwoLists(l1.next,l2)</div><div class="line">            <span class="keyword">return</span> l1</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            l2.next = mergeTwoLists(l1,l2.next)</div><div class="line">            <span class="keyword">return</span> l2</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>#</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;21-Merge-Two-Sorted-Lists&quot;&gt;&lt;a href=&quot;#21-Merge-Two-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;21. Merge Two Sorted Lists&quot;&gt;&lt;/a&gt;21. Merge Two Sorted Lists&lt;/h1&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://github.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://github.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>BOT从入门到放弃之阶段性综述</title>
    <link href="http://github.com/2017/09/11/BOT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E9%98%B6%E6%AE%B5%E6%80%A7%E7%BB%BC%E8%BF%B0/"/>
    <id>http://github.com/2017/09/11/BOT从入门到放弃之阶段性综述/</id>
    <published>2017-09-11T02:19:58.000Z</published>
    <updated>2017-09-11T01:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>对话系统一般分为任务型和闲聊式两种，其中任务型对话，它主要针对某些指定的场景，例如餐馆推荐、机票预订等服务场景，通过和用户的交互，完成指定的任务，因此称作任务型对话，也叫封闭域对话。闲聊型的对话主要是指BOT能够针对用户的输入，给出一个合理的回复，从而实现基础的聊天功能，又称作开放域对话，因为用户此时的输入是无特定场景的。实际的系统则常常是二者兼具的，因为商用对话系统既要能作为个人助理完成用户的指定需求，又要能对用户的闲聊做出合理的回应。这样就有一个问题，如何判断此时用户的意图是闲聊还是任务呢？文章[1]提出把用户的意图（任务或闲聊）的划分看做一个二分类问题，然后可以用SVM或者CNN作为分类器，通过词向量和一些人工特征作为模型的输入，最终可以得到用户的意图的概率输出，从而判断此时对话系统的工作状态应该是闲聊型还是任务型。</p>
<a id="more"></a>
<p>本文会按照任务型和闲聊型两种对话类型进行分别介绍，还有一些既不是任务型也不是闲聊型的研究工作，这些工作主要在通过对话任务来研究语言的产生和语义的解释性问题，这些工作会作为本文对对话系统研究综述的一部分在最后进行介绍。</p>
<h2 id="1-任务型对话"><a href="#1-任务型对话" class="headerlink" title="1. 任务型对话"></a>1. 任务型对话</h2><p>常见的任务型对话系统一般包括语音识别、自然语言理解、状态跟踪与决策、自然语言生成、语音合成这五大部分，本文主要针对对话系统在自然语言层面上的研究进展进行介绍，而不涉及语音识别与语音合成。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjeth24o1kj30kw09u3ze.jpg" alt=""></p>
<p>###1.1 自然语言理解</p>
<p>自然语言理解主要是指对用户的输入进行建模，挖掘用户意图，一般是事先设定好几种用户的意图，然后转换为一个对用户输入进行多分类的问题[1]，或者是对用户的输入进行词性标注或命名体识别等序列标注方法得到结构化数据，从而得到输入语句的结构表示[2]。随着深度神经网络研究的不断深入，用神经网络对输入源语句进行向量表示[3-6]作为语言理解模块的方法已经逐渐成为当下的研究热点，一般是用循环神经网络RNN对输入语句进行迭代[3,4,5]，从而得到向量表示，而[6]是采用普通的DNN和CNN，如下图所示。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjelanivc6j31040qq0yj.jpg" alt=""></p>
<p>###1.2 对话状态跟踪与决策</p>
<p>对话状态跟踪是指对于当前的任务，已经确定的信息和未确定的信息都有哪些，从而让系统得出当前还需要向用户确定的信息，以及根据当前信息能提供给用户的候选结果。这个对话状态跟踪模块是任务型对话系统的核心，常见的是slot-value填槽方法，也就是预先确定本任务会有哪些信息slot需要确定，以及每个信息的取值范围value，在每一个自然语言理解模块后进行slot-value检测，确定当前这句话包含的信息，从而更新slot-value。传统的slot-value更新就是从用户句子中进行命名体识别，然后再通过匹配来更新状态[3]。最新的工作一般是利用输入语句的向量化表示，或是同所有slot-value对进行匹配，得到最可能的slot-value对[6]，或是同前一时刻的状态向量一同作为一个RNN网络的输入，更新状态向量[4,5]。下图是先对源语句进行CNN卷积特征提取，第一层卷积、第二层卷积和第三层之后的池化结果共同组成了Jordan-RNN的输入，进行状态更新。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5ezq9i6zj315g0pe0ya.jpg" alt=""></p>
<p>除了slot-value方法，还有基于检索式的对话模型，避开了状态更新这个步骤，直接利用源语言和候选回复进行匹配，匹配最好的一句就直接作为回复进行输出[3]，如下图所示。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5e7h3etsj319e0jowkc.jpg" alt=""></p>
<p>对话决策是指根据当前的对话状态，确定任务候选的答案，例如餐馆推荐任务就是根据当前的对话进度确定用户可能感兴趣的餐馆，即为候选答案。一般的做法都是根据当前确定的信息，直接在数据库或者知识库中进行查询，这样就能得到候选答案。</p>
<p>###1.3 自然语言生成</p>
<p>如果是上文的检索式，直接把检索结果作为输出即可。另外一种方法设定好系统的所有可能回复句式，然后根据前两个模块的输出来确定当前应该采取的回复句式，再根据当前状态和决策结果对句式进行填充，然后得到完整的生成句[2]。此外，还可以通过一个RNN网络进行自然语言生成，RNN的输入一般是之前模块提取到的输入表示、跟踪状态、决策结果三者的融合[4]，[5]在其基础上又引入了一个隐变量z，作为用户意图的表示，主要思想来自于变分自编码器VAE，模型结构如下图所示。模型结构图中没有体现的是强化学习部分，强化学习一般是在损失函数中引入回报值reward，这个回报一般是根据最后系统是否能完成任务来决定。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi5f0vtrjrj31i80ua46f.jpg" alt=""></p>
<h2 id="2-闲聊型对话"><a href="#2-闲聊型对话" class="headerlink" title="2. 闲聊型对话"></a>2. 闲聊型对话</h2><p>闲聊型对话一般是基于端到端的模型，用大量双句语料进行训练，同时一般还加入强化学习来辅助。[7]用强化学习解决无限环，[8]在encoder和decoder之间维护了另一个RNN，[9]则在[8]的基础上还引入了一个隐变量z，[10]则是使用了前向后向seq2seq模型，[11]把生成对抗网络GAN引入到模型中进行语言生成，[12]则是基于检索式的闲聊系统。</p>
<h3 id="21-基于强化学习的无限环解决方案"><a href="#2-1-基于强化学习的无限环解决方案" class="headerlink" title="2.1 基于强化学习的无限环解决方案"></a>2.1 基于强化学习的无限环解决方案</h3><p>传统的seq2seq倾向于回复generic response，也就是无意义的安全回答，[13]提出可以最大化互信息(MMI)来解决这一问题，但是仍不能解决多轮对话中的infinite loop问题，如下图</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmv0sauq5j31ds0nik0g.jpg" alt=""></p>
<p>为此，作者提出了加入RL的seq2seq模型，状态是前两轮的对话pi和qi，动作是本轮产生的回答，policy就是seq2seq网络，reward有三部分：</p>
<ul>
<li>易于回答：不想让bot成为话题终结者，因此人工构造了枯燥回复集S，定义</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmv6tfy4kj30i004gglu.jpg" alt=""></p>
<ul>
<li><p>信息流：不想产生无限环，因此要让同一个agent接连两次的回复尽可能不相似， 不能总是同一句话反复说。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmv8y83sej30is03st8z.jpg" alt=""></p>
</li>
<li><p>语义连贯：当前agent的回复应该和另一agent的提问紧密相关，这样不仅能做到所答即所问，还能避免产生I don’t know等安全回复。做法是计算互信息，作为reward</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmvc49kwij30ne02qaah.jpg" alt=""></p>
</li>
</ul>
<p>最终的reward是</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmvdfipevj30ig02cweo.jpg" alt=""></p>
<p>本文作者训练了两个agent，进行你问我答的对话生成，</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhn19kmxigj31j80nyaea.jpg" alt=""></p>
<p>首先用有监督的方法预训练模型，借鉴[14]中的训练思想，把reward设置为互信息的大小，然后退火的方式训练模型，最终梯度的更新公式如下</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmzkck9crj30lg02ymxi.jpg" alt=""></p>
<p>前面是模型预训练，接下来是用之前构造的reward进行强化学习训练，梯度更新公式如下</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmzru8mbej30pi04udgc.jpg" alt=""></p>
<h3 id="22-基于层叠式网络结构的端到端模型"><a href="#2-2-基于层叠式网络结构的端到端模型" class="headerlink" title="2.2 基于层叠式网络结构的端到端模型"></a>2.2 基于层叠式网络结构的端到端模型</h3><p>层叠式[8]的seq2seq模型结构如下图，主要是在encoder和decoder之间维护了一个独立的RNN，这个RNN用于连接输入输出两个端，且在一次对话的多个轮次中不断更新状态，从而一定程度的解决了多轮对话中不连贯的问题。<img src="https://ws4.sinaimg.cn/large/006tKfTcly1fhnzcd6p83j30u10fi0un.jpg" alt=""></p>
<p>[9]则在上图的基础上引入了隐变量z，模型结构如下。<img src="https://ws4.sinaimg.cn/large/006tKfTcly1fho0oianddj30sx0fjmyt.jpg" alt=""></p>
<p>引入隐变量的动机在于，之前的模型虽然兼顾了多轮对话中的信息，但是很难产生有意义的回复，本文作者分析可能的原因是模型只有底层的随机变量来决定最终的输出，这样没有办法兼顾全局，而在更高层次引入隐变量z，则可以一定程度的改善这一问题。此外，从计算的角度看，如果用隐状态来包含所有的历史信息，那么由于梯度消失，这种信息必然会丢失一部分，可以加入隐变量z来加强对历史信息的建模，从而达到更好的回复效果。</p>
<p>[10]则是先用PMI方法从query中抽取一个关键词，本文特指名词，然后利用这个关键词和seq2BF模型，去生成回复。seq2BF是指从句子中间的某个位置向两侧生成，最终得到完整的句子，而不是seq2seq那种从初始到末尾的生成。如下图所示</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fhoyq6bnjsj31000o6gow.jpg" alt=""></p>
<p>这样的好处在于，一方面能针对query中的重点信息生成回复，避免了无意义回答，同时seq式的语言生成模块能保证语句的流畅可理解。</p>
<h3 id="23-非seq2seq的闲聊式对话"><a href="#2-3-非Seq2Seq的闲聊式对话" class="headerlink" title="2.3 非Seq2Seq的闲聊式对话"></a>2.3 非Seq2Seq的闲聊式对话</h3><p>[12]是基于检索式的闲聊型对话，文章中主要是通过构造一系列的人工特征，然后结合输入语句，从候选答案中进行匹配，从而实现对闲聊的合理回复。</p>
<p>[14]则是提出了用GAN来进行对话生成，其主要创新点在于提出了AEL层，为的是解决蒙特卡洛采样操作导致的梯度无法从Discriminator传到Generator中的问题。整个模型结构如下图所示，右侧是AEL层的结构。<img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjel1aw53fj31d60pm7ag.jpg" alt=""></p>
<h2 id="3-multi-agent对话系统"><a href="#3-Multi-agent对话系统" class="headerlink" title="3. Multi-agent对话系统"></a>3. Multi-agent对话系统</h2><p>前文介绍了最近任务型和闲聊型对话的研究进展和方向，当下还有一些研究工作是想通过对话来探索语言中的逻辑或者语言本身的产生机制。</p>
<p>[15]提出了一个全新的任务：两个agent之间进行协商，协商目标是最大化自身的收益，协商的内容是指定好的一系列物品和对应的价值，具体如下图</p>
<p>¨<img src="https://ws2.sinaimg.cn/large/006tKfTcly1fi6wij47etj31kw0sods5.jpg" alt=""></p>
<p>对于同样的物品不同的agent有不同的价值，文章设置了三种物品，每个agent的goal用六个数字表示，六个数字就是三个物品的个数和对应的价值，然后用一个GRU对这个向量进行编码，从而作为一个特征向量参与到之后的序列生成中，如下图</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fi6x3aznhvj30ro0aotaj.jpg" alt=""></p>
<p>其中input encoder就是生成句子的部分，而output decoder则是在对话结束后生成最终的决策。决策就是最后每个agent都得到几个物品，采用枚举法对所有的可能求概率，概率最大的方案就是最终的决策。此外，本文还提出了加入强化学习的goal-based training，用最终的协商结果最为reward来优化agent网络的参数。文章的结果证明了这种最优化目标的训练要比最大似然的训练方法更好，能让模型学习到推理的能力和语言表达能力。</p>
<p>[16]是facebook和deepmind的工作。通过训练两个agent，一个作为sender，对两个图像中被标记的一个生成单个symbol的描述，然后另一个作为receiver的输入是两个图像以及sender的描述，输出sender描述的是哪一张图像，结果为真即认为两个agent学到了他们能交流的语言。图像不是直接输入，而是先送到预训练好的VGG网络，用VGG的softmax层或者倒数第二个全连接层的输出作为图像的表示。模型结构很简单，如下图所示。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5fao593xj31js0psqa8.jpg" alt=""></p>
<p>作者构造了两种sender，第一种是全连接网络对图像进行表示，第二种额外加了卷积层。模型的训练只有最终成败作为监督信号进行参数更新。最终的结果如下图所示。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fi5ffsghvaj30tw0ne0wr.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fi5fl6dpdfj316u0f4n15.jpg" alt=""></p>
<p>上表的纯度，是根据生成symbol对图片聚类，而每个图片有真实的标签，表示该图片的大类，因此能计算类内纯度作为评价指标。为了更好的观察sender给出的描述在语义上的效果，作者把相同的object的fc向量表示进行average，得到每个object的向量表示，然后用t-SNE可视化，同样的symbol用相同的颜色表示，结果如下图。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi5fxi1ddtj30uq0uq0wt.jpg" alt=""></p>
<p>可以看出，距离相近的大多颜色相同，但是效果仍不明显。</p>
<p>为了验证我们学到的是两张图是狗与猫的区别，而不是一些其他因素，我们对sender输入吉娃娃和猫，对receiver输入泰迪和猫，希望sender描述吉娃娃后，receiver能成功选中泰迪。基于这样的思想，构建大量此类的image pair，再次训练，结果如下。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fi5g281p81j31g40cg0w5.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5g18qnafj30vs0uqn1j.jpg" alt=""></p>
<p>可以看到纯度略有提升，而且可视化结果更加明显了，这表明两个agent的确学到了对于图片的语义描述。</p>
<p>最后，这种agent之间的沟通还不能被人类理解，因此要对描述的生成加入自然语言的引导，也就是一边训练agent之间的交流，一边对sender的embedding层进行外加softmax训练，使其能针对图片选择正确的单词，而不是agent才能理解的symbols。这两种训练方式等概率进行切换，同时两种训练方式共享embedding层，最终能达到一定程度的人类可理解的、agent之间可交流的效果。</p>
<p>##4. 评价方法</p>
<p>常见的对话评价方法一般使用BLEU值来比对生成结果和标准答案之间的差距，但是这从本质上不能揭示对话的质量好坏。最近的研究[17]在尝试用神经网络模型对生成结果进行评价，但这也受限于训练评价网络的语料，不能真正的适应开放域的对话评价。其他的评价指标诸如对话轮数、信息熵[10]、对话成功率[2]、基于检索的评价指标[12]、多样性和相关性[11]等指标，虽然能对对话的某一方面进行评价，但都不能兼顾语言和语义两个层面，甚至有论文指出，对话是无法评价的。无论如何，一个合适的评价方法对于对话系统的研究是至关重要的，相信评价方法的研究仍会是对话系统中一项重要的工作，更好的评价方法会不断出现。</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>近些年对话系统的研究呈现出不断增长的态势，一方面是由于人工智能领域取得的长足发展让工业界和学术界都想挑战对话这个相对复杂的人工智能任务，另一方面也是由于对话系统的广大应用前景和应用需求的推动。无论是任务型还是闲聊型，当前的研究都没有深入到对话的本质，从对话本身的机制入手研究，对话的目的是交流，因此我们人类的每一句话都有自身的目的——信息的外传或内收。且人类的对话是可控的，我们能决定对话的进行方向，而只用双句语料进行seq2seq的训练，没有办法做到对未来对话的掌控。总之，对话系统是一种相对复杂的人工智能任务，当下的基础理论还不足以支撑让对话系统像人一样思考，但是相信随着技术的发展和进步，对话系统的研究也会不断取得长足的进步。</p>
<p>[1] Akasaki, S., &amp; Kaji, N. (2017). Chat Detection in an Intelligent Assistant: Combining Task-oriented and Non-task-oriented Spoken Dialogue Systems (pp. 1–11). Presented at the ACL.</p>
<p>[2] Williams, J. D., Asadi, K., &amp; Zweig, G. (2017). Hybrid Code Networks: practical and efficient end-to-end dialog control with supervised and reinforcement learning (pp. 1–13). Presented at the ACL.</p>
<p>[3] Wu, Y., Wu, W., Xing, C., Li, Z., &amp; Zhou, M. (2017). Sequential Matching Network: A New Architecture for Multi-turn Response Selection in Retrieval-Based Chatbots (pp. 1–10). Presented at the ACL.</p>
<p>[4] Wen, T.-H., Vandyke, D., Mrksic, N., Gasic, M., Rojas-Barahona, L. M., Su, P.-H., et al. (2017). A Network-based End-to-End Trainable Task-oriented Dialogue System (pp. 1–12). Presented at the EACL.</p>
<p>[5] Wen, T.-H., Miao, Y., Blunsom, P., &amp; Young, S. (2017). Latent Intention Dialogue Models  (pp. 1–10). Presented at the ICML.</p>
<p>[6] NikolaMrksic, aghdha, D. S., Wen, T.-H., Thomson, B., &amp; Young, S. (2017). Neural Belief Tracker: Data-Driven Dialogue State Tracking  (pp. 1–12). Presented at the ACL.</p>
<p>[7] Li, J., Monroe, W., Ritter, A., Galley, M., Gao, J., &amp; Jurafsky, D. (2016). Deep Reinforcement Learning for Dialogue Generation  (pp. 1–11). Presented at the EMNLP.</p>
<p>[8]Serban, I. V., Sordoni, A., Bengio, Y., Courville, A., &amp; Pineau, J. (2015). Building End-To-End Dialogue Systems Using Generative Hierarchical Neural Network Models (Vol. cs.CL). Presented at the AAAI.</p>
<p>[9] Serban, I. V., Alessandro Sordoni, Lowe, R., Charlin, L., Pineau, J., Courville, A., &amp; Bengio, Y. (2016, June 15). A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues .</p>
<p>[10] Mou, L., Song, Y., Yan, R., Li, G., Zhang, L., &amp; Jin, Z. (2016). Sequence to Backward and Forward Sequences: A Content-Introducing Approach to Generative Short-Text Conversation (pp. 1–10). Presented at the COLING.</p>
<p>[11] Sun, C., &amp; Wang, Z. (2017). Neural Response Generation via GAN with an Approximate Embedding Layer (pp. 1–11). Presented at the EMNLP.</p>
<p>[12] Yan, Z., Duan, N., Bao, J. W., Chen, P., Zhou, M., Li, Z., &amp; Zhou, J. (2016). DocChat: An Information Retrieval Approach for Chatbot Engines Using Unstructured Documents. Presented at the ACL.</p>
<p>[13] Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao, and Bill Dolan. 2016a. A diversity-promoting objective function for neural conversation models. In Proc. of NAACL-HLT.</p>
<p>[14] Ranzato, M., Chopra, S., Auli, M., &amp; Zaremba, W. (2016). Sequence Level Training with Recurrent Neural Networks (pp. 1–16). Presented at the ICLR.</p>
<p>[15]Lewis, M., Yarats, D., Dauphin, Y. N., Parikh, D., &amp; Batra, D. (2017). Deal or No Deal? End-to-End Learning for Negotiation Dialogues (pp. 1–11). Presented at the EMNLP.</p>
<p>[16]Lazaridou, A., Peysakhovich, A., &amp; Baroni, M. (2017). Multi-Agent Cooperation and the Emergence of (Natural) Language  (pp. 1–11). Presented at the ICLR.</p>
<p>[17]Lowe, R., Noseworthy, M., Serban, I. V., Angelard-Gontier, N., Bengio, Y., &amp; Pineau, J. (2017). Towards an Automatic Turing Test: Learning to Evaluate Dialogue Responses (pp. 1–20). Presented at the ACL.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对话系统一般分为任务型和闲聊式两种，其中任务型对话，它主要针对某些指定的场景，例如餐馆推荐、机票预订等服务场景，通过和用户的交互，完成指定的任务，因此称作任务型对话，也叫封闭域对话。闲聊型的对话主要是指BOT能够针对用户的输入，给出一个合理的回复，从而实现基础的聊天功能，又称作开放域对话，因为用户此时的输入是无特定场景的。实际的系统则常常是二者兼具的，因为商用对话系统既要能作为个人助理完成用户的指定需求，又要能对用户的闲聊做出合理的回应。这样就有一个问题，如何判断此时用户的意图是闲聊还是任务呢？文章[1]提出把用户的意图（任务或闲聊）的划分看做一个二分类问题，然后可以用SVM或者CNN作为分类器，通过词向量和一些人工特征作为模型的输入，最终可以得到用户的意图的概率输出，从而判断此时对话系统的工作状态应该是闲聊型还是任务型。&lt;/p&gt;
    
    </summary>
    
      <category term="bot" scheme="http://github.com/categories/bot/"/>
    
    
      <category term="bot" scheme="http://github.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>BOT从入门到放弃之multi-agent</title>
    <link href="http://github.com/2017/08/02/BOT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8Bmulti-agent/"/>
    <id>http://github.com/2017/08/02/BOT从入门到放弃之multi-agent/</id>
    <published>2017-08-02T07:19:58.000Z</published>
    <updated>2017-10-16T09:04:18.124Z</updated>
    
    <content type="html"><![CDATA[<p>通过多个agent之间的交互来模拟自然语言生成等语言任务。</p>
<a id="more"></a>
<h1 id="1-deal-or-no-deal-end-to-end-learning-for-negotiation-dialogue"><a href="#1-Deal-or-No-Deal-End-to-End-Learning-for-Negotiation-Dialogue" class="headerlink" title="1. Deal or No Deal? End-to-End Learning for Negotiation Dialogue"></a>1. Deal or No Deal? End-to-End Learning for Negotiation Dialogue</h1><p> Lewis, M., Yarats, D., Dauphin, Y. N., Parikh, D., &amp; Batra, D. (2017). (pp. 1–11). Presented at the EMNLP.</p>
<p>本文提出了一个全新的任务：两个agent之间进行协商，协商目标是最大化自身的收益，协商的内容是指定好的一系列物品和对应的价值，具体如下图</p>
<p>¨<img src="https://ws2.sinaimg.cn/large/006tKfTcly1fi6wij47etj31kw0sods5.jpg" alt=""></p>
<p>对于同样的物品不同的agent有不同的价值，文章设置了三种物品，每个agent的goal用六个数字表示，六个数字就是三个物品的个数和对应的价值，然后用一个GRU对这个向量进行编码，从而作为一个特征向量参与到之后的序列生成中，如下图</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fi6x3aznhvj30ro0aotaj.jpg" alt=""></p>
<p>其中input encoder就是生成句子的部分，而output decoder则是在对话结束后生成最终的决策。决策就是最后每个agent都得到几个物品，采用枚举法对所有的可能求概率，概率最大的方案就是最终的决策。</p>
<p>此外，本文由提出了加入强化学习的goal-based training，用最终的协商结果最为reward来优化agent网络的参数，</p>
<h1 id="2-multi-agent-cooperation-and-the-emergence-of-natural-language"><a href="#2-Multi-agent-cooperation-and-the-emergence-of-natural-language" class="headerlink" title="2. Multi-agent cooperation and the emergence of (natural) language"></a>2. Multi-agent cooperation and the emergence of (natural) language</h1><p>Lazaridou, A., Peysakhovich, A., &amp; Baroni, M. (2017).  (pp. 1–11). Presented at the ICLR.</p>
<p>本文是facebook和deepmind的工作。通过训练两个agent，一个作为sender，对两个图像中被标记的一个生成单个symbol的描述，然后另一个作为receiver的输入是两个图像以及sender的描述，输出sender描述的是哪一张图像，结果为真即认为两个agent学到了他们能交流的语言。图像不是直接输入，而是先送到预训练好的VGG网络，用VGG的softmax层或者倒数第二个全连接层的输出作为图像的表示。模型结构很简单，如下图所示。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5fao593xj31js0psqa8.jpg" alt=""></p>
<p>作者构造了两种sender，第一种是全连接网络对图像进行表示，第二种额外加了卷积层。模型的训练只有最终成败作为监督信号进行参数更新。最终的结果如下图所示。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fi5ffsghvaj30tw0ne0wr.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fi5fl6dpdfj316u0f4n15.jpg" alt=""></p>
<p>上表的纯度，是根据生成symbol对图片聚类，而每个图片有真实的标签，表示该图片的大类，因此能计算类内纯度作为评价指标。为了更好的观察sender给出的描述在语义上的效果，作者把相同的object的fc向量表示进行average，得到每个object的向量表示，然后用t-SNE可视化，同样的symbol用相同的颜色表示，结果如下图。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi5fxi1ddtj30uq0uq0wt.jpg" alt=""></p>
<p>可以看出，距离相近的大多颜色相同，但是效果仍不明显。</p>
<p>为了验证我们学到的是两张图是狗与猫的区别，而不是一些其他因素，我们对sender输入吉娃娃和猫，对receiver输入泰迪和猫，希望sender描述吉娃娃后，receiver能成功选中泰迪。基于这样的思想，构建大量此类的image pair，再次训练，结果如下。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fi5g281p81j31g40cg0w5.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5g18qnafj30vs0uqn1j.jpg" alt=""></p>
<p>可以看到纯度略有提升，而且可视化结果更加明显了，这表明两个agent的确学到了对于图片的语义描述。</p>
<p>最后，这种agent之间的沟通还不能被人类理解，因此要对描述的生成加入自然语言的引导，也就是一边训练agent之间的交流，一边对sender的embedding层进行外加softmax训练，使其能针对图片选择正确的单词，而不是agent才能理解的symbols。这两种训练方式等概率进行切换，同时两种训练方式共享embedding层，最终能达到一定程度的人类可理解的、agent之间可交流的效果。</p>
<h1 id="3-curiosity-driven-exploration-by-self-supervised-prediction"><a href="#3-Curiosity-driven-Exploration-by-Self-supervised-Prediction" class="headerlink" title="3. Curiosity-driven Exploration by Self-supervised Prediction"></a>3. Curiosity-driven Exploration by Self-supervised Prediction</h1><p> Pathak, D., Agrawal, P., Efros, A. A., &amp; Darrell, T. (2017). (pp. 1–12). Presented at the ICML.</p>
<p>在强化学习中，尤其是agent完成游戏任务，reward不是实时获得的，一般最终游戏胜利或者失败才会产生一个reward，本文提出了基于好奇心的reward机制，当模型去探索一些新鲜的状态，这就可以产生一个reward去进行鼓励，判断状态是否‘新鲜’可以通过估计当前状态和动作会产生什么状态，和实际产生了什么状态，估计与实际的差越大说明模型对于这个新状态掌握的越少，需要进行激励，鼓励模型对该状态进行探索，也就是好奇心。同时这个新的状态应该是对action相关的，例如模型不需要对树叶不同时刻随风摆动的新状态进行探索，因为这个action无关，实现方案如下图。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fi6xmq752fj31fu0kutby.jpg" alt=""></p>
<p>通过学习一个估计的a去逼近真实的a，这样能学到状态的高层表达，这个高层表达理想上是和a直接相关的，解决了树叶问题。然后再通过估计的s与真实的s的高层表达做差，得到了内部reward。内部reward和外部reward相结合就是模型的reward，从而指导参数的更新。</p>
<p>最终的结果显示，单单是用内部reward就能让模型在游戏中取得很好的表现，充分表明了这种自监督的学习方式的有效性。</p>
<h1 id="4-a-roadmap-towards-machine-intelligence"><a href="#4-A-Roadmap-towards-Machine-Intelligence" class="headerlink" title="4. A Roadmap towards Machine Intelligence"></a>4. A Roadmap towards Machine Intelligence</h1><p>Mikolov, T., Joulin, A., &amp; Baroni, M. (2016).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过多个agent之间的交互来模拟自然语言生成等语言任务。&lt;/p&gt;
    
    </summary>
    
      <category term="bot" scheme="http://github.com/categories/bot/"/>
    
    
      <category term="bot" scheme="http://github.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>BOT从入门到放弃之chatBOT</title>
    <link href="http://github.com/2017/07/18/BOT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8BchatBOT/"/>
    <id>http://github.com/2017/07/18/BOT从入门到放弃之chatBOT/</id>
    <published>2017-07-18T01:47:39.000Z</published>
    <updated>2017-09-10T15:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>chatbot一般都是非任务型、数据驱动、闲聊式，第一篇文章用强化学习解决无限环，2、3两文在encoder和decoder之间维护了另一个RNN，3相较于2还引入了一个隐变量z，思想是来自VAE。4则是使用了他们组之前的一个工作：前后向seq2seq模型。</p>
<a id="more"></a>
<h1 id="1-deep-reinforcement-learning-for-dialogue-generation"><a href="#1-Deep-reinforcement-learning-for-dialogue-generation" class="headerlink" title="1. Deep reinforcement learning for dialogue generation"></a>1. Deep reinforcement learning for dialogue generation</h1><p>Li, J., &amp; Monroe, W. (2016). Deep Reinforcement Learning for Dialogue Generation, 1–11.</p>
<p>传统的seq2seq倾向于回复generic response，也就是无意义的安全回答，li 2015提出可以最大化互信息(MMI)来解决这一问题，但是仍不能解决多轮对话中的infinite loop问题，如下图</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmv0sauq5j31ds0nik0g.jpg" alt=""></p>
<p>为此，作者提出了加入RL的seq2seq模型，状态是前两轮的对话pi和qi，动作是本轮产生的回答，policy就是seq2seq网络，reward有三部分：</p>
<ul>
<li>易于回答：不想让bot成为话题终结者，因此人工构造了枯燥回复集S，定义</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmv6tfy4kj30i004gglu.jpg" alt=""></p>
<ul>
<li><p>信息流：不想产生无限环，因此要让同一个agent接连两次的回复尽可能不相似， 不能总是同一句话反复说。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmv8y83sej30is03st8z.jpg" alt=""></p>
</li>
<li><p>语义连贯：当前agent的回复应该和另一agent的提问紧密相关，这样不仅能做到所答即所问，还能避免产生I don’t know等安全回复。做法是计算互信息，作为reward</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmvc49kwij30ne02qaah.jpg" alt=""></p>
</li>
</ul>
<p>最终的reward是</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmvdfipevj30ig02cweo.jpg" alt=""></p>
<h2 id="simulation"><a href="#simulation" class="headerlink" title="simulation"></a>simulation</h2><p>本文作者训练了两个agent，进行你问我答的对话生成，</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhn19kmxigj31j80nyaea.jpg" alt=""></p>
<p>首先用有监督的方法预训练模型，借鉴<a href="https://liangguirong5.github.io/2017/03/16/ImageCaption从入门到放弃之三-强化学习/" target="_blank" rel="external">sequence level training with recurrent neural network</a>那篇文章的思想，把reward设置为互信息的大小，然后退火的方式训练模型，最终梯度的更新公式如下</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhmzkck9crj30lg02ymxi.jpg" alt=""></p>
<p>PS: 我觉得这里等号右边缺少了求期望操作，或者等号变成约等号。</p>
<p>前面是模型预训练，接下来是用之前构造的reward进行强化学习训练，梯度更新公式如下</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhmzru8mbej30pi04udgc.jpg" alt=""></p>
<h1 id="2-building-end-to-end-dialogue-systems-using-generative-hierarchical-neural-network-models"><a href="#2-Building-End-To-End-Dialogue-Systems-Using-Generative-Hierarchical-Neural-Network-Models" class="headerlink" title="2. Building End-To-End Dialogue Systems Using Generative Hierarchical Neural Network Models"></a>2. Building End-To-End Dialogue Systems Using Generative Hierarchical Neural Network Models</h1><p>Iulian V Serban, A. S. Y. B. A. C. J. P. (2016). Building End-To-End Dialogue Systems Using Generative Hierarchical Neural Network Models (pp. 1–8).</p>
<p>层叠式的seq2seq模型结构如下图，主要是在encoder和decoder之间维护了一个独立的RNN，这个RNN用于连接输入输出两个端，且在一次对话的多个轮次中不断更新状态，从而一定程度的解决了多轮对话中不连贯的问题。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fhnzcd6p83j30u10fi0un.jpg" alt=""></p>
<h1 id="3-a-hierarchical-latent-variable-encoder-decoder-model-for-generating-dialogues"><a href="#3-A-Hierarchical-Latent-Variable-Encoder-Decoder-Model-for-Generating-Dialogues" class="headerlink" title="3. A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues"></a>3. A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues</h1><p>Serban, I. V., Sordoni, A., Lowe, R., Charlin, L., Pineau, J., Courville, A., &amp; Bengio, Y. (2016, May 20). A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues. <em>arXiv.org</em>.</p>
<p>在上图的基础上引入了隐变量z，模型结构如下。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fho0oianddj30sx0fjmyt.jpg" alt=""></p>
<p>引入隐变量的动机在于，之前的模型虽然兼顾了多轮对话中的信息，但是很难产生有意义的回复，本文作者分析可能的原因是模型只有底层的随机变量来决定最终的输出，这样没有办法兼顾全局，而在更高层次引入隐变量z，则可以一定程度的改善这一问题。此外，从计算的角度看，如果用隐状态来包含所有的历史信息，那么由于梯度消失，这种信息必然会丢失一部分，可以加入隐变量z来加强对历史信息的建模，从而达到更好的回复效果。</p>
<p>#3.x TOWARDS AN AUTOMATIC TURING TEST: LEARNING TO EVALUATE DIALOGUE RESPONSES</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjel9x4nf8j30t208sta1.jpg" alt=""></p>
<p>​    </p>
<h1 id="4sequence-to-backward-and-forward-sequences-a-content-introducing-approach-to-generative-short-text-conversation"><a href="#4-Sequence-to-Backward-and-Forward-Sequences-A-Content-Introducing-Approach-to-Generative-Short-Text-Conversation" class="headerlink" title="4.Sequence to Backward and Forward Sequences: A Content-Introducing Approach to Generative Short-Text Conversation"></a>4.Sequence to Backward and Forward Sequences: A Content-Introducing Approach to Generative Short-Text Conversation</h1><p>Mou, L., Song, Y., Yan, R., Jin, Z., Zhang, L., &amp; Li, G. (2016). Sequence to Backward and Forward Sequences: A Content-Introducing Approach to Generative Short-Text Conversation (pp. 1–10). Presented at the COLING.</p>
<p>本文提出，先用PMI方法从query中抽取一个关键词，本文特指名词，然后利用这个关键词和seq2BF模型，去生成回复。seq2BF是指从句子中间的某个位置向两侧生成，最终得到完整的句子，而不是seq2seq那种从初始到末尾的生成。如下图所示</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fhoyq6bnjsj31000o6gow.jpg" alt=""></p>
<p>这样的好处在于，一方面能针对query中的重点信息生成回复，避免了无意义回答，同时seq式的语言生成模块能保证语句的流畅可理解。</p>
<p>#4. DocChat</p>
<p>是基于检索式的闲聊型对话，文章中主要是通过构造一系列的人工特征，然后结合输入语句，从候选答案中进行匹配，从而实现对闲聊的合理回复。</p>
<p>#5. Conversational Contextual Cues: The Case of Personalization and History for Response Ranking</p>
<p>Al-Rfou, R. (2016). Conversational Contextual Cues: The Case of Personalization and History for Response Ranking, 1–10.</p>
<p>网络结构如下图所示，并不是生成式的，而是answer selection的方法，对Reddit 上1.33亿个conversation进行模型训练，输入的几项分别是：</p>
<p>input: dialog[i], context: dialog[0:i-1], author: 该评论的作者</p>
<p>正样本：response=dialog[i+1]</p>
<p>负样本：response=随机其他comment</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhnxgdo4vuj31he0lygpf.jpg" alt=""></p>
<p>另外，文章还提出了multi-loss的方法，旨在度量以上网络中每个feature的有效性。分别对组合{response, input}, {response, context}, {response, author}求一个hidden layer, 将这3个hiddenlayer{h1, h2, h3} concatenate成一个总hidden layer h4, 将{h1, h2, h3, h4}分别得到的分类loss加和作为网络总loss进行优化，但最后prediction的时候只采用h4的输出结果。</p>
<p># </p>
<h1 id="6-neural-response-generation-via-gan-with-an-approximate-embedding-layer"><a href="#6-Neural-Response-Generation-via-GAN-with-an-Approximate-Embedding-Layer" class="headerlink" title="6. Neural Response Generation via GAN with an Approximate Embedding Layer"></a>6. Neural Response Generation via GAN with an Approximate Embedding Layer</h1><p>本文提出了用GAN来进行对话生成，其主要创新点在于提出了AEL层，为的是解决蒙特卡洛采样操作导致的梯度无法从Discriminator传到Generator中的问题。整个模型结构如下图所示，右侧是AEL层的结构。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjel1aw53fj31d60pm7ag.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;chatbot一般都是非任务型、数据驱动、闲聊式，第一篇文章用强化学习解决无限环，2、3两文在encoder和decoder之间维护了另一个RNN，3相较于2还引入了一个隐变量z，思想是来自VAE。4则是使用了他们组之前的一个工作：前后向seq2seq模型。&lt;/p&gt;
    
    </summary>
    
      <category term="bot" scheme="http://github.com/categories/bot/"/>
    
    
      <category term="bot" scheme="http://github.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>BOT从入门到放弃之task-oriented</title>
    <link href="http://github.com/2017/07/15/BOT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8Btask-oriented/"/>
    <id>http://github.com/2017/07/15/BOT从入门到放弃之task-oriented/</id>
    <published>2017-07-15T12:21:42.000Z</published>
    <updated>2017-09-10T11:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>task-oriented类型的对话系统，是有明确的任务导向的，一般用于订酒店之类的任务。</p>
<p>本文首先在第一部分介绍了end2end memory网络结构，文章2是在MemN2N网络的基础上，引入了三种学习方式：模仿学习、强化学习、提前预测式学习；文章3提出了一种交互式的对话方法，让bot进行反问，学习什么时候该反问，论证了反问会带来效果提升；文章4是我目前没发觉到值得学习之处的一篇ICLR2017；文章5是google提出的加入用户模型（画像）的一种bot；文章6提出了一个比较严谨的任务型bot框架，采用深度学习和强化学习结合的方法训练。7则是基于检索式的对话，8、9是深度强化学习任务驱动的对话系统。</p>
<a id="more"></a>
<h1 id="1-memn2n"><a href="#1-MemN2N" class="headerlink" title="1. MemN2N"></a>1. MemN2N</h1><p>Sukhbaatar, S. (2015). End-To-End Memory Networks, 1–11.</p>
<p>这是一个<a href="http://blog.csdn.net/u011274209/article/details/53384232?ref=myread" target="_blank" rel="external">memory network</a>的改进版本，用于端到端的生成任务，前面的链接有讲memory network的工作原理，本文主要解释MemN2N的结构和一些细节。</p>
<p>end-to-end memory network，简称MemN2N，下面左右两图分别是单层和多层的MemN2N。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fhku2l9qchj319w0jen0o.jpg" alt=""></p>
<h2 id="单层"><a href="#单层" class="headerlink" title="单层"></a>单层</h2><p>先拿单层进行说明，我们有一系列的$x_i$作为输出，构建记忆模块$m_i$，构建方法是用embedding矩阵$A$对$x_i$进行向量化表示；然后再用矩阵$B$对输入$q$向量化，表示为$u$，然后通过内积求出输入与记忆的关联：<br>$$<br>p_i = Softmax(u^Tm_i)<br>$$<br>$x_i$还要通过矩阵C向量化得到输出模块$c_i$，输出$o$可以表示为<br>$$<br>o=\sum_ip_ic_i<br>$$<br>最终的输出是<br>$$<br>\hat{a}=Softmax(W(o+u))<br>$$</p>
<h2 id="多层"><a href="#多层" class="headerlink" title="多层"></a>多层</h2><p>如果扩展到多层，则参考图(b)，下一层的输入是<br>$$<br>u^{k+1}=u^k+o^k<br>$$<br>每一层都有自己的$A^k$和$C^k$，用于对x向量化。文章提出了两种权重设置：</p>
<ul>
<li>邻接：$A^{k+1}=C^k$, $W^{T}=C^k$, $B=A^1$</li>
<li>层级：$A^1=…=A^k$, $C^1=…=C^k$, $u^{k+1}=Hu^k+o^k$</li>
</ul>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul>
<li>不想忽略句子中单词顺序，因而加入位置信息</li>
</ul>
<p>$$<br>m_i = \sum_jl_j•Ax_{ij}<br>$$</p>
<p>其中j表示第i句第j个词，$l_{kj} = (1-j/J)-(k/d)(1-2j/J)$, 其中$J$是句子长度，$d$是$l$的维度</p>
<ul>
<li>同时，不同句子之间的先后顺序也不能忽略，那么加入时序信息</li>
</ul>
<p>$$<br>m_i = \sum_jAx_{ij}+T_A(i)<br>$$</p>
<p>$T_A(i)$是$T_A$的第i行，$T_c$同理</p>
<ul>
<li>加入一些噪声（10%的空白）记忆</li>
</ul>
<h1 id="2-dialog-based-language-learning"><a href="#2-Dialog-based-Language-Learning" class="headerlink" title="2. Dialog-based Language Learning"></a>2. Dialog-based Language Learning</h1><p>Weston, J. (2016, April 21). Dialog-based Language Learning. <em>arXiv.org</em>.</p>
<p>本文在<a href="https://liangguirong5.github.io/2017/07/15/end-to-end-memory-network/" target="_blank" rel="external">MemN2N</a>的基础上，提出了10种对话任务(见下图)，和三种训练方式：imitation learning，reward-based imitation，forward prediction。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fhls2xviifj30h10ie43a.jpg" alt=""></p>
<h2 id="数据集构建"><a href="#数据集构建" class="headerlink" title="数据集构建"></a>数据集构建</h2><p>文中的试验数据集是bAbI和MovieQA, 下载地址<a href="http://fb.ai/babi。" target="_blank" rel="external">http://fb.ai/babi。</a></p>
<p>针对上面的十个任务需要分别构建不同的数据集合，每个任务在构建数据集合的时候都分别设置三个$\pi_{acc}$(0.5,0.1,0.01)，这个参数表示回答正确的概率。</p>
<h2 id="模型学习"><a href="#模型学习" class="headerlink" title="模型学习"></a>模型学习</h2><p>基模型还是MemN2N，只是输出层最后的softmax变了，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhlt2xme6rj30ce01vt8r.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhlt36kkqtj30cb022dfw.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhlt3cexhvj30bj01uq2y.jpg" alt=""></p>
<p>新加的$y_1…y_C$表示的是候选集合C中的每一项。文中的C是bAbI任务训练集合中所有出现过的actions，对于MovieQA就是他的KB的全部单词。</p>
<ul>
<li>imitation learning：有监督学习，默认训练集中的answer就是标准回答，进行训练。</li>
<li>reward-based imitation：好的回复产生+1的reward，不好的回复reward为0，简单的策略就是对好的回复采用imitation learning，不好的直接弃之不理。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhlstlrgecj30fx0bvjsf.jpg" alt=""></p>
<ul>
<li>forward prediction：把输出层更改成下图的样子。</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhltkizzxyj30dq0cqt9x.jpg" alt=""></p>
<p>具体来讲，是给定question和ans，想要预测ans对应teacher的response，我理解的response就是reward为正还是0，</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhm069qsp2j30j2024q33.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhm09i7qlyj30b0019mx6.jpg" alt=""></p>
<p>其中，yi是student的候选回复，$\beta$是d维向量表示student实际选择的action</p>
<ul>
<li>reward-based imitation + forward prediction: 两种方法相结合</li>
</ul>
<h2 id="results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhm1m2cqpfj30tn0c643u.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhm1mm5dw0j30t90bjdkm.jpg" alt=""></p>
<h1 id="3-learning-through-dialogue-interactions-by-asking-questions"><a href="#3-LEARNING-THROUGH-DIALOGUE-INTERACTIONS-BY-ASKING-QUESTIONS" class="headerlink" title="3. LEARNING THROUGH DIALOGUE INTERACTIONS BY ASKING QUESTIONS"></a>3. LEARNING THROUGH DIALOGUE INTERACTIONS BY ASKING QUESTIONS</h1><p>Li, J., &amp; Weston, J. (2017). LEARNING THROUGH DIALOGUE INTERACTIONS BY ASKING QUESTIONS, 1–16.</p>
<p>代码 <a href="https://github.com/facebook/MemNN/tree/master/AskingQuestions">https://github.com/facebook/MemNN/tree/master/AskingQuestions</a></p>
<p>本文研究了基于交互的生成式对话方法，证明了bot在反问后，聊天质量明显提升。</p>
<p>主要借鉴的是前面的    Jason Weston. Dialog-based language learning. arXiv preprint arXiv:1604.06045, 2016.</p>
<p>数据集采用WikiMovies dataset，是一个roughly 100k questions over 75k entities based on questions with answers in the open movie dataset (OMDb)</p>
<p>文章希望通过交互式的反问解决一下三类常见错误：bot不理解问题；不能把现有的知识和问题建立关联；缺乏回答问题必备的知识</p>
<h2 id="the-tasks"><a href="#The-Tasks" class="headerlink" title="The Tasks"></a>The Tasks</h2><h3 id="1-question-clarification"><a href="#1-QUESTION-CLARIFICATION" class="headerlink" title="1 QUESTION CLARIFICATION"></a>1 QUESTION CLARIFICATION</h3><p>文章具体指问题中夹杂拼写错误的词，解决方法是bot或者请求重新提问，或者反问Do you mean [correct] ?</p>
<p>1.Question Paraphrase &amp; 2.Question Verification</p>
<h3 id="2-knowledge-operation"><a href="#2-KNOWLEDGE-OPERATION" class="headerlink" title="2 KNOWLEDGE OPERATION"></a>2 KNOWLEDGE OPERATION</h3><p>bot尝试去寻找相关的知识回答，可以反问问题是否与<em>*</em>相关？也可以直接让提问者指出相关的KB知识。</p>
<p>3.ask for revelvant knowloge &amp; 4.knowledge verification</p>
<h3 id="3-knowledge-acquisition"><a href="#3-KNOWLEDGE-ACQUISITION" class="headerlink" title="3 KNOWLEDGE ACQUISITION"></a>3 KNOWLEDGE ACQUISITION</h3><p>KB不完整，只能请求提问者给出答案，训练bot使得下次碰到相同的问题能回答正确答案。</p>
<p>5.missing question entity 6. missing answer entity 7. missing relation entity 8. missing triple 9.missing everything</p>
<h2 id="traintest-regima"><a href="#Train-Test-Regima" class="headerlink" title="Train/Test Regima"></a>Train/Test Regima</h2><p>模型训练的目标有两个：</p>
<p>​    检验这种交互式的能否带来效果提升；</p>
<p>​    学习到什么时候应该反问</p>
<p>文章采用线下有监督，线上强化学习的方法分别实现这两个目标。</p>
<h3 id="1-offline"><a href="#1-offline" class="headerlink" title="1. offline"></a>1. offline</h3><p>训练集TrainQA, TrainAQ, and TrainMix，测试集 TestQA, TestAQ, and TestModelAQ，这样组合可以有9种，然后对于前面提到的9个任务分别训练对应的模型，每种模型又分别在前面9种组合的train、test数据上进行训练。举例说明，在QA上训练，AQ上测试，就是观察一个训练中从来不发问的student在测试时每次必问的表现；在AQ上训练、QA上测试亦是如此。需要注意的是，TrainMix是一半QA一半AQ，TestModelAQ是要保证反问的问题必须要和问题相关。</p>
<h3 id="2-online-rl"><a href="#2-online-RL" class="headerlink" title="2. online RL"></a>2. online RL</h3><p>每次提问都会有cost，cost的大小反映了teacher的耐心程度，取值范围是[0,2]</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fhkhr74qc5j30qa04gt9e.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhmmk0skvjj30eb028mxd.jpg" alt=""></p>
<p>其中，$a_1$表示是否提问，$a_2$表示最终的回答。</p>
<h1 id="4-learning-end-to-end-goal-oriented-dialog"><a href="#4-Learning-End-to-End-Goal-Oriented-Dialog" class="headerlink" title="4. Learning End-to-End Goal-Oriented Dialog"></a>4. Learning End-to-End Goal-Oriented Dialog</h1><p>Bordes, A., &amp; Weston, J. (2017). Learning End-to-End Goal-Oriented Dialog (pp. 1–15). Presented at the ICLR.</p>
<p>借用<a href="http://blog.csdn.net/abcjennifer/article/details/53428053#end-to-end-generative-dialogue" target="_blank" rel="external">另一篇博文</a>的话来评论本文：</p>
<blockquote>
<p>评论：数据较弱，方法不实用。</p>
<p>本文就是End-to-End Memory Network的一个应用，基于End-to-End Memory Network的实验，最终也是answer selection(而不是answer generation). 数据为以餐馆预订为目的地bAbI数据集，模型定义得非常个性化，难以迁移。</p>
</blockquote>
<h1 id="6-end-to-end-lstm-based-dialog-control-optimized-with-supervised-and-reinforcement-learning"><a href="#6-End-to-end-LSTM-based-dialog-control-optimized-with-supervised-and-reinforcement-learning" class="headerlink" title="6. End-to-end LSTM-based dialog control optimized with supervised and reinforcement learning"></a>6. End-to-end LSTM-based dialog control optimized with supervised and reinforcement learning</h1><p>Williams, J. D., &amp; Zweig, G. (2016, June 4). End-to-end LSTM-based dialog control optimized with supervised and reinforcement learning. <em>arXiv.org</em>.</p>
<p>本文用dl和rl训练下图模型，模型其实非常简单，先对query进行NER，然后存储下识别好的entity，同时送给lstm以entity的type和values，lstm的输出是所有回复的模板的概率分布，用RL就从中采样，用DL就取最大，得到的answer模板是没有填充实体value的，这时候需要用写好的规则去填充，然后判断是回复给对话者还是进行api call。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhq9t47j9lj31go0istc3.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhqegimc0mj30pq05iq3o.jpg" alt=""></p>
<h1 id="7-sequential-matching-network-a-new-architecture-for-multi-turn-response-selection-in-retrieval-based-chatbots"><a href="#7-Sequential-Matching-Network-A-New-Architecture-for-Multi-turn-Response-Selection-in-Retrieval-Based-Chatbots" class="headerlink" title="7. Sequential Matching Network: A New Architecture for Multi-turn Response Selection in Retrieval-Based Chatbots"></a>7. Sequential Matching Network: A New Architecture for Multi-turn Response Selection in Retrieval-Based Chatbots</h1><p>Wu, Y., Wu, W., Xing, C., Li, Z., &amp; Zhou, M. (2017).  Presented at the ACL.</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5e7h3etsj319e0jowkc.jpg" alt=""></p>
<h1 id="8-a-network-based-end-to-end-trainable-task-oriented-dialogue-system"><a href="#8-A-Network-based-End-to-End-Trainable-Task-oriented-Dialogue-System" class="headerlink" title="8. A Network-based End-to-End Trainable Task-oriented Dialogue System"></a>8. A Network-based End-to-End Trainable Task-oriented Dialogue System</h1><p>Wen, T.-H., &amp; Young, S. (2017). Presented at the EACL.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi5ezd5ux2j31140p80xb.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fi5ezq9i6zj315g0pe0ya.jpg" alt=""></p>
<h1 id="9-latent-intention-dialogue-models"><a href="#9-Latent-Intention-Dialogue-Models" class="headerlink" title="9. Latent Intention Dialogue Models"></a>9. Latent Intention Dialogue Models</h1><p>Wen, T.-H., Miao, Y., Blunsom, P., &amp; Young, S. (2017). Presented at the ICML.</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fi5f0vtrjrj31i80ua46f.jpg" alt=""></p>
<h1 id="10-neural-belief-tracker-data-driven-dialogue-state-tracking"><a href="#10-Neural-Belief-Tracker-Data-Driven-Dialogue-State-Tracking" class="headerlink" title="10. Neural Belief Tracker: Data-Driven Dialogue State Tracking"></a>10. Neural Belief Tracker: Data-Driven Dialogue State Tracking</h1><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjelanivc6j31040qq0yj.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;task-oriented类型的对话系统，是有明确的任务导向的，一般用于订酒店之类的任务。&lt;/p&gt;
&lt;p&gt;本文首先在第一部分介绍了end2end memory网络结构，文章2是在MemN2N网络的基础上，引入了三种学习方式：模仿学习、强化学习、提前预测式学习；文章3提出了一种交互式的对话方法，让bot进行反问，学习什么时候该反问，论证了反问会带来效果提升；文章4是我目前没发觉到值得学习之处的一篇ICLR2017；文章5是google提出的加入用户模型（画像）的一种bot；文章6提出了一个比较严谨的任务型bot框架，采用深度学习和强化学习结合的方法训练。7则是基于检索式的对话，8、9是深度强化学习任务驱动的对话系统。&lt;/p&gt;
    
    </summary>
    
      <category term="bot" scheme="http://github.com/categories/bot/"/>
    
    
      <category term="bot" scheme="http://github.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>Tecent第一届社交广告高校算法大赛——萌新经验分享</title>
    <link href="http://github.com/2017/07/01/Tecent%E7%AC%AC%E4%B8%80%E5%B1%8A%E7%A4%BE%E4%BA%A4%E5%B9%BF%E5%91%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E8%90%8C%E6%96%B0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/2017/07/01/Tecent第一届社交广告算法竞赛——萌新经验分享/</id>
    <published>2017-06-30T16:38:37.000Z</published>
    <updated>2017-10-20T06:38:36.679Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://algo.tpai.qq.com/home/information/index.html" target="_blank" rel="external">赛题详情</a>是对腾讯的社交广告进行cvr预测，下面讲一下我们两只萌新是怎么进行赛题求解的。</p>
<a id="more"></a>
<h2 id="1-数据分析与预处理"><a href="#1-数据分析与预处理" class="headerlink" title="1. 数据分析与预处理"></a>1. 数据分析与预处理</h2><p>首先我们对数据进行原始特征的分析，发现不同日期虽然点击量不同，但是转化率大致接近，除了最后几天因为回流时间的影响，导致转化率偏低，因此时间特征我们抛弃了日期，而选择了小时。同时，我们对26-30这几天的数据进行了数据清洗，清洗标准是，统计不同广告主报回流的平均时间，然后用这个时间加上当前数据的点击时间，来预计回流时间，对回流时间超过30号24点的数据进行清洗，这样可以去除肯定错误的一些数据。处理后发现，这样的数据主要集中在30号，因为大部分广告主的回流时间都在集中在24小时内，只有30号受此影响较大。</p>
<h2 id="2-特征工程与特征选择"><a href="#2-特征工程与特征选择" class="headerlink" title="2. 特征工程与特征选择"></a>2. 特征工程与特征选择</h2><h3 id="21-特征工程"><a href="#2-1-特征工程" class="headerlink" title="2.1 特征工程"></a>2.1 特征工程</h3><p>在自己构造的特征方面，我们主要列出以下几个有明显提升的特征：</p>
<table>
<thead>
<tr>
<th>特征名</th>
<th>特征描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>tfidf</td>
<td>对用户安装列表统计user-app的tfidf值</td>
</tr>
<tr>
<td>exptv_A_B</td>
<td>A和B两个特征的联合转化率（tilltoday），采用均值平滑</td>
</tr>
<tr>
<td>exptv_A_B_C</td>
<td>ABC三个特征的联合转化率（tilltoday），采用均值平滑</td>
</tr>
<tr>
<td>dup_non</td>
<td>非重复数据</td>
</tr>
<tr>
<td>dup_first(mid/last)</td>
<td>重复数据的第一条（中间/最后一条）</td>
</tr>
<tr>
<td>cnttv_A_B</td>
<td>A和B两个特征的联合点击数（tilltoday）</td>
</tr>
<tr>
<td>user_clickCreat_cnt</td>
<td>截止到当前用户对某个creativeID的点击数目</td>
</tr>
<tr>
<td>user_conver_history</td>
<td>用户截止到当前的转化历史，用01统计然后Hash处理</td>
</tr>
<tr>
<td>time_diff</td>
<td>前向时间差，用户距离上一次点击的时间差</td>
</tr>
<tr>
<td>next_time_diff</td>
<td>后向时间差，用户距离下一次点击的时间差</td>
</tr>
<tr>
<td>X_time_diff</td>
<td>用户距离上一次点击相同X的时间差</td>
</tr>
<tr>
<td>next_X_time_diff</td>
<td>用户距离下一次点击相同X的时间差</td>
</tr>
</tbody>
</table>
<p>其中，关键的几个点是重复数据要采用onehot方式构造特征，exptv转化率统计的是今天之前的所有数据，且采用的平滑方法是(x+k*means)/(1+k)，k是自己设置的参数，这一方法借鉴的是owenzhang的开源代码，而user_conver_history则是参考台大的开源代码。其实还有构造很多其他特征，但是最终的最优模型没有采用，所以没有一一列出。</p>
<h3 id="22-特征选择"><a href="#2-2-特征选择" class="headerlink" title="2.2 特征选择"></a>2.2 特征选择</h3><p>特征选择方面，我们的最优特征组合是</p>
<p>features = [‘tfidf’,’user_clickApp_tillnow’,’user_clickCreat_cnt’, ‘user_conver_history’,’creativeID’,’advertiserID’,’adID’,’appID’,’education’,’clickHour’,’gender’,’connectionType’,’telecomsOperator’, ‘exptv_pos_connect’,’exptv_advertiser_pos’,’exptv_creative_pos’,’exptv_age_marriage’, ‘exptv_user_appPlatform’,’exptv_user_positionType’,’exptv_age_camgaign’,’exptv_userID_connectionType’,’exptv_userID_appCategory’,’exptv_telecomsOperator_clickHour_connectionType’,’exptv_sitesetID_connectionType_appID’, ‘dup_non’,’dup_first’,’dup_last’,’dup_mid’,’app_time_diff’,’positionID_time_diff’,’appCategory_time_diff’,’next_time_diff’ ‘next_app_time_diff’,’next_creativeID_time_diff’,’next_appCategory_time_diff’,’next_positionID_time_diff’, ‘cnttv_advertiser_pos’,’cnttv_age_pos’,’cnttv_creative_pos’,’cnttv_pos_connect’]</p>
<p>其中，联合转化率中包含user的几个是复赛中新加入的，在初赛中没有效果，但在复赛中产生的很好的提升，我们分析原因是31号的数据中有大量之前从未出现过的用户，如果在训练时加入用户特征那么在预测的时候就能有提升，相当于一定程度的进行冷启动训练。</p>
<p>其他联合转化率大多是与positionID的组合，效果都还可以；通过前向后向时间差这种leakage特征也带来了较大的提升；用户对于app的tfidf给在决赛中给模型带来了一定的提升，这个提升在初赛中是没有显现出来的；重复数据的trick提升有限，且一定要转化成onehot特征，不过聊胜于无。最后，很多原始特征也是不能删去的，加入和不加入区别较大。</p>
<h2 id="3-建模方法"><a href="#3-建模方法" class="headerlink" title="3. 建模方法"></a>3. 建模方法</h2><p>我们的模型主要是XGB和LGB两个，CNN和FFM只是参与average进行submission文件融合，RF主要是进行Stacking，stacking我们使用了随机森林、XGB、LGB三种模型，这三种模型进行小数据集训练、半随机特征群训练，能构造近十种基模型，stacking后提升明显。</p>
<h3 id="31-单模型"><a href="#3-1-单模型" class="headerlink" title="3.1 单模型"></a>3.1 单模型</h3><p>首先是单模型，我们最好的单模型是采用了LGB的gbdt模型，采用上面列出的40个左右特征，以及经过清洗后的全集数据，30号作为验证集，单模型LGB效果可以达到0.1024，而单模型XGB用同样的特征只能达到0.1029，单模型FFM和单模型CNN线上预估均在0.1034左右，他们的作用是后来可以进行average，提升最后提交文件的分数。</p>
<h3 id="32-ensemble"><a href="#3-2-Ensemble" class="headerlink" title="3.2 Ensemble"></a>3.2 Ensemble</h3><p>然后是ensemble，我们的模型融合采用了两种方法，分别是stacking和average，均带来了3-4个万分点的提升，但是average具有一定的不稳定性，下面具体展开。</p>
<h4 id="321-stacking"><a href="#3-2-1-Stacking" class="headerlink" title="3.2.1 Stacking"></a>3.2.1 Stacking</h4><p>我们的stacking采用了以下几种训练基模型的方法：</p>
<ol>
<li><p>首先是训练集合多样性：</p>
<p>​采用20-24号五折交叉，对25-29进行预测。</p>
<p>​采用25-29号五折交叉，对25-29进行预测。</p>
<p>​全集17-29号五折交叉，对17-29进行预测，不过最后使用的是25-29的数据。</p>
</li>
<li><p>然后是训练模型多样性：</p>
<p>​LGB</p>
<p>​XGB</p>
<p>​RF    </p>
</li>
<li><p>最后是特征多样性：</p>
<p>​固定23维很重要的特征，再从特征群中随机采样其他特征，训练单模型XGB。</p>
</li>
</ol>
<p>这样可以组合出很多种基模型，我们的stacking主要采用了lgb2024，lgb2529，xgb2024，xgb2529，RF2024，RF2529， lgb_all，xgb_all，RF_all这9列特征进行第二层LGB的训练，结果比单模型提升了近四个万分点。</p>
<p>然后我们又采用特征多样性来进行stacking，也就是固定23维重要特征，然后从特征群中采样另外30维特征，进行基模型训练，这样得到了10维特征进行stacking，这个stacking的结果虽然只有0.1025，但是在下面的average中产生了很好的效果。</p>
<h4 id="322-average"><a href="#3-2-2-Average" class="headerlink" title="3.2.2 Average"></a>3.2.2 Average</h4><p>average是直接对历史提交文件进行人工加权融合，我们发现数据分布差异性较大的但是分数相近的submission文件，进行加权融合会产生很大的提升，例如把stacking结果和最好的单模型进行融合，可以提升三个万分点；把CNN和FFM这两个表现不是很好的模型再和单模型XGB的结果进行融合，也比单模型XGB要提升3个万分点。</p>
<p>我们最终把stacking的最好结果去和最好的单模型LGB以及之前提交过的一些文件进行加权融合，达到了0.1017的成绩，而融合之前的表现最好的单个文件在0.1020左右，最后一天把随机特征stacking又加进去，以及提升后的xgb的submission文件，提升到了最终的分数。</p>
<h2 id="4-算法运行环境"><a href="#4-算法运行环境" class="headerlink" title="4. 算法运行环境"></a>4. 算法运行环境</h2><p>我们的模型基本都是在17-29进行训练，30验证，31测试，运行环境是中科院自动化所模式识别实验室的公用计算集群，在不同的cpu节点、gpu节点都跑过，所以代码运行时间没有一个准确的估计，需要根据具体的运行环境决定。</p>
<p>代码至少需要60G的运行内存，CNN是基于tensorflow实现的，所以需要在CPU上进行embedding，在GPU上进行模型训练，其他模型均只占用CPU资源。</p>
<h2 id="5-其他观察和思考"><a href="#5-其他观察和思考" class="headerlink" title="5. 其他观察和思考"></a>5. 其他观察和思考</h2><p>关于比赛，最大的遗憾就是没有精力做FFM这个大家都很推崇的模型，因为我们队伍只有两个人在做，且是两个萌新，初赛收尾才开始做特征工程也是没谁了，所以初赛只能排到195压线进复赛，后来进入复赛开始做特征、调模型、做stacking忙的不可开交，分数也一直上升，就没想着去重新构造出FFM适用的一些类别特征和离散化的数值特征，导致FFM分数只能在1030开外，想做的时候发现已经抽不出人手了。感觉要是能把FFM做好，stacking分数会提升不少，且之后的average也会有很大的提升。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://algo.tpai.qq.com/home/information/index.html&quot;&gt;赛题详情&lt;/a&gt;是对腾讯的社交广告进行cvr预测，下面讲一下我们两只萌新是怎么进行赛题求解的。&lt;/p&gt;
    
    </summary>
    
      <category term="Competition" scheme="http://github.com/categories/Competition/"/>
    
    
      <category term="Algorithm" scheme="http://github.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ImageCaption从入门到放弃之三_ 强化学习</title>
    <link href="http://github.com/2017/03/16/ImageCaption%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E4%B8%89-%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://github.com/2017/03/16/ImageCaption从入门到放弃之三-强化学习/</id>
    <published>2017-03-15T16:22:51.000Z</published>
    <updated>2018-02-08T08:50:30.935Z</updated>
    
    <content type="html"><![CDATA[<p>因为传统的seq2seq模型存在exposure bias（训练的时候，不论前一时刻的生成词是什么，总把期望的标签词作为当前时刻的输入；而测试时，使用前一时刻的生成词作为当前时刻的输入，这种现象就是exposure bias），而且优化的也不是整个序列的出现概率，而是每个词出现的条件概率，参见：<a href="https://liangguirong5.github.io/2017/03/12/ImageCaption从入门到放弃之二_attention机制/" target="_blank" rel="external">ImageCaption从入门到放弃之二_attention机制</a></p>
<p>因此第一篇文章提出用强化学习直接优化最终的生成序列的metric分数，避免了上面的两个问题；第二篇文章是对第一篇的改进，目前在MSCOCO上的caption评测分数最高。</p>
<a id="more"></a>
<h1 id="sequence-level-training-with-recurrent-neural-networks"><a href="#Sequence-Level-Training-with-Recurrent-Neural-Networks" class="headerlink" title="Sequence Level Training with Recurrent Neural Networks"></a>Sequence Level Training with Recurrent Neural Networks</h1><p>XENT：最小化交叉熵的序列生成，上面两个问题都存在，尤其是exposure bias。模型结构见下图，就是最原始的带attetion的seq2seq模型。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdp1tcrau7j30vc0lcq5o.jpg" alt=""></p>
<p>DAD：随机选择下一时刻的输入是标签or上一时刻的输出，是一种退火的思路，刚开始用样本的标签来训练这个模型，随着训练的深入，逐渐减小这个用标签训练的概率，直至最后模型完全不需要标签样本。存在的问题是，反传的时候不知道当前的输出是怎么产生的，这样有很多不能解释的地方。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdp1totgqoj30wg09ujsm.jpg" alt=""></p>
<p>E2E：对beam search的改进，直接取输出层前k个最大的词，重新归一化他们的权重，然后进行加权求和，这个得到的融合词作为下一时刻的输入。实际操作时，还是退火方法训练。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdp1usfepuj30y20ao3zt.jpg" alt=""></p>
<p>MIXER：这是本文提出的方法，mix XENT and RL的简写，强化学习的模型agent是decoder，状态s是当前的输入$x_t$和$h_{t-1}$，policy则是RNN内部的各个参数，action是每次预测出来的词，reward是计算出来的metric分值。因为最后用一整串词来计算metric分数，例如BLEU值，因此需要用policy gradient来进行模型的学习，损失函数如下：<br>$$<br>L_\theta=-\sum_{w_1^g,…,w_T^g}p_\theta(w_1^g,…,w_T^g)r(w_1^g,…,w_T^g)=-E_{[w_1^g,…,w_T^g]\sim p(\theta)}r(w_1^g,…,w_T^g)<br>$$<br>也就是生成序列长度为T，他的概率乘上对应的回报需要最大化，对应于上面的损失函数最小化。然后涉及到对这个函数进行求导，参考前人的工作得到<br>$$<br>\frac{\partial L_\theta}{\partial \theta}=\sum_t\frac{\partial L_\theta}{\partial o_t}\frac{\partial o_t}{\partial \theta}<br>$$<br>其中，$o_t$是softmax层的输入，然后有<br>$$<br>\frac{\partial L_\theta}{\partial o_t}=(r(w_1^g,…,w_T^g)-\widetilde{r}_{t+1})(p_{\theta}(w_{t+1}|w_t^g,h(t+1),c_t)-1(w_{t+1}^g))<br>$$</p>
<p>其中，$\widetilde{r}_{t+1}$是一个baseline，表示一个标准的回报值。如果我们生成的序列reward高，那第一个括号项就是正数，否则为负数，从而在这个式子中决定梯度的方向。第二个括号项就是梯度方向，是输出与标签的差（我们把t+1时刻的输出作为伪标签），之所以这么写，可以回想逻辑回归里面的梯度计算，误差函数求导之后就是这两项的差。我们这种计算梯度的方式，就是强化学习中的 policy gradient，如果不理解这个公式请看下面这一段，懂得可以跳过：</p>
<p>我们不知道生成序列的每一步的reward，但是我们知道最终这个序列的reward（BLEU、ROUGE等分数），这样如果最终reward高（对应上式第一个括号项大于零），那么我们的伪标签就是positive的，我们希望产生这样的结果，伪标签也就一定程度的变“真”了，这时直接沿着梯度下降去更新参数即可，且更新的幅度和reward大小成正比；如果最终reward很不理想，导致第一个括号项为负，那么再进行梯度下降去优化，就会得到相反的效果（max损失函数），使得输出离伪标签更远（这时伪标签是negative的），达到我们的本意。</p>
<p>在实际中，我们的字典很大，意味着action space很大，直接进行RL训练很难进行，因此作者提出预训练+退火：</p>
<p>前$N^{XENT}​$个epochs用ground truth进行训练，损失函数采用交叉熵；然后$N^{XE+R}​$个epochs中，前$T-\Delta​$步进行XENT训练，后$\Delta​$步进行Reinforce训练。算法和结构框图如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Data: a set of sequences with their corresponding context.</div><div class="line">Result: RNN optimized for generation.</div><div class="line">Initialize RNN at random and set N_XENT,N_XE+R and Delta;</div><div class="line">for s=T,1,-Delta do </div><div class="line">	if s==T then</div><div class="line">		train RNN for N_XENT epochs using XENT only;</div><div class="line">	else</div><div class="line">		train RNN for N_XE+R epochs. Use XENT loss in the first s 			steps, and RL in the remaining T-s steps.</div><div class="line">	end</div><div class="line">end</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdp1v5gpb4j30z009egmz.jpg" alt=""></p>
<h1 id="self-critical-sequence-training-for-image-captioning"><a href="#Self-critical-Sequence-Training-for-Image-Captioning" class="headerlink" title="Self-critical Sequence Training for Image Captioning"></a>Self-critical Sequence Training for Image Captioning</h1><p>细心阅读会发现，上文提到的$\widetilde{r}_{t+1}$并没有说明是怎么确定的，在该论文中只是说他们用RNN的隐状态作为一个线性回归模型输入，去预测未来的reward，理论依据不足。因此，本篇论文就这一点完善了上文的工作。</p>
<p>本文提出了SCST(Self-critical Sequence Training )训练方式，利用当前模型去跑一遍解码过程，得到的评测分数作为baseline，参与强化学习训练中，下面这个图更有助于理解：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtd1qyovcj312y0jcadn.jpg" alt=""></p>
<p>效果图</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtepb6turj30qa0agabz.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SCST是目前表现最好的模型，也是ImageCaption从入门到放弃的最后一期。思考了几个问题，SCST每一次的标准reward是由相似的模型解码得到的，是不是可以用GAN来进行改进呢？此外，能不能设计一个模型，生成每一步的reward呢？这样不仅能加快训练，效果肯定也有提升。最后，关于DQN和PG的优劣，可能会单独发一篇博文来好好整理一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为传统的seq2seq模型存在exposure bias（训练的时候，不论前一时刻的生成词是什么，总把期望的标签词作为当前时刻的输入；而测试时，使用前一时刻的生成词作为当前时刻的输入，这种现象就是exposure bias），而且优化的也不是整个序列的出现概率，而是每个词出现的条件概率，参见：&lt;a href=&quot;https://liangguirong5.github.io/2017/03/12/ImageCaption从入门到放弃之二_attention机制/&quot;&gt;ImageCaption从入门到放弃之二_attention机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因此第一篇文章提出用强化学习直接优化最终的生成序列的metric分数，避免了上面的两个问题；第二篇文章是对第一篇的改进，目前在MSCOCO上的caption评测分数最高。&lt;/p&gt;
    
    </summary>
    
      <category term="Caption" scheme="http://github.com/categories/Caption/"/>
    
    
      <category term="caption" scheme="http://github.com/tags/caption/"/>
    
      <category term="RL" scheme="http://github.com/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>ImageCaption从入门到放弃之二_attention机制</title>
    <link href="http://github.com/2017/03/12/ImageCaption%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E4%BA%8C_attention%E6%9C%BA%E5%88%B6/"/>
    <id>http://github.com/2017/03/12/ImageCaption从入门到放弃之二_attention机制/</id>
    <published>2017-03-12T12:55:43.000Z</published>
    <updated>2017-04-04T09:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇文章<a href="https://liangguirong5.github.io/2017/03/01/image_caption/" target="_blank" rel="external">ImageCaption从入门到放弃之一_任务综述</a>中引向paperweekly的链接，介绍了传统的基于seq2seq的caption模型，这个模型来自机器翻译，因此机器翻译中的attetion机制在我们的caption任务中也可以借鉴，很多论文就是围绕这个attention该怎么加而展开的，我们主要介绍下面两篇比较有代表性的论文：</p>
<a id="more"></a>
<p>Xu, K., &amp; Bengio, Y. (2016, April 20). Show, Attend and Tell: Neural Image Caption Generation with Visual Attention. <em>arXiv.org</em>.</p>
<p>Lu, J., &amp; Socher, R. (2016, December 7). Knowing When to Look: Adaptive Attention via A Visual Sentinel for Image Captioning. <em>arXiv.org</em>.</p>
<p>注意：这个两篇文章的符号不统一，请注意区分。</p>
<h1 id="neural-image-caption-generation-with-visual-attention"><a href="#Neural-Image-Caption-Generation-with-Visual-Attention" class="headerlink" title="Neural Image Caption Generation with Visual Attention"></a>Neural Image Caption Generation with Visual Attention</h1><p>第一篇论文是Bengio课题组的一份工作，主要是在seq2seq进行image caption的基础上，引入attention机制，强调生成caption时，不同时刻的关注点应该在不同的图像区域。 下图是模型的整体框架。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdkdc2lxybj31gq0o6afg.jpg" alt=""></p>
<p>其中，encoder部分是一个卷积网络，目的是获取原图像的L个特征，每个特征是一个D维的向量，用以表示原图的某一部分。<br>$$<br>a={a_1,…,a_L}, a_i\in R^D<br>$$<br>原文采用VGG网络的第四层卷积结果作为这些特征向量，共有512个14*14的feature map，flatten成512个196维的特征。</p>
<p>decoder部分是一个LSTM，叠加使用了attention机制。本文的分别使用了hard和soft两种attention。</p>
<h2 id="stochastic-hard-attention"><a href="#Stochastic-“Hard”-attention" class="headerlink" title="Stochastic “Hard” attention"></a>Stochastic “Hard” attention</h2><p>用t表示生成第t个词的时刻，$s_{t,i}$是一个布尔量，表示第t时刻第i个图像特征$a_i$是否为注意力特征，服从多元伯努利分布，如下式所示<br>$$<br>p(s_{t,i}=1|s_{j&lt;t},a)=\alpha_{t,i}<br>$$</p>
<p>$$<br>z_t = \sum_is_{t,i}a_i<br>$$</p>
<p>其中，$z_t$表示经过attention机制后融合图像特征，作为LSTM的输入。</p>
<p>我们要优化的是$log p(y|a)$，想让它尽可能的大，那可以通过构造一个和$s$有关的下界$L_s$，最大化$L_s$即可最大化$log p(y|a)$，<br>$$<br>L_s = \Sigma_sp(s|a)log p(y|s,a)&lt;=log\Sigma_sp(s|a)p(y|s,a)=log p(y|a)<br>$$<br>这样反传的时候，求导数就有</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdl6m491kuj30j006iq3i.jpg" alt=""></p>
<p>这里面s服从多元伯努利分布，<br>$$<br>s_t \sim Multinoulli_L({\alpha_i})<br>$$<br>因此前面的导数公式可以用N次蒙特卡洛采样近似，即</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdl6qs71mwj30ik060dgf.jpg" alt=""></p>
<p>最后，引入了一个平均阈值项b和多元伯努利分布的熵项H，来减小上面梯度计算的方差，</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fearlia3acj30pq040wet.jpg" alt=""></p>
<p>最终的公式为</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdl6xtphfcj30km05qq3q.jpg" alt=""></p>
<p>$\lambda_r$和$\lambda_e$分别是需要交叉验证来确定的参数。（此处黑人问号，待参考：Multiple object recognition with visual attention）</p>
<h2 id="deterministic-soft-attention"><a href="#Deterministic-“Soft”-Attention" class="headerlink" title="Deterministic “Soft” Attention"></a>Deterministic “Soft” Attention</h2><p>所谓soft，就是不引入上面的s来决定哪个图像特征需要被关注，而是每个图像特征都按照原本的被关注的概率进行期望求和，得到我们需要的输入Z。<br>$$<br>z_t = \sum_i^L\alpha_{t,i}a_i<br>$$<br>值得注意的是，$\sum_i\alpha_{ti}=1$是不会变的，因为我们是通过softmax得到的$\alpha$。我们再令$\sum_t\alpha_{ti}\approx1$，这是为了鼓励模型在整个句子生成的期间内，虽然每个特征被注意的时刻不同，但是每个特征总有一些时刻被着重注意了，也就是每个特征都有用，不能从头到尾都和生成的词无关。</p>
<p>又引入了一个scalar $\beta$，使$z_t =\beta \sum_i^L\alpha_{t,i}a_i$，$\beta_t=\sigma(f_\beta(h_{t-1}))$，没什么理由，只是单纯实验发现这样做能让注意力集中在图像中的目标上。</p>
<p>最后，最小化下面的带惩罚项的损失函数。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdl870l391j30h602wq35.jpg" alt=""></p>
<h2 id="results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fear7o1a7uj31c60lkn4k.jpg" alt=""></p>
<h1 id="knowing-when-to-look-adaptive-attention-via-a-visual-sentinel-for-image-captioning"><a href="#Knowing-When-to-Look-Adaptive-Attention-via-A-Visual-Sentinel-for-Image-Captioning" class="headerlink" title="Knowing When to Look: Adaptive Attention via A Visual Sentinel for Image Captioning"></a>Knowing When to Look: Adaptive Attention via A Visual Sentinel for Image Captioning</h1><p>这篇文章是上一篇的改进，出发点在于不需要每个词的生成都对应一个attetion，一些介词和连词并不需要图像中的信息，因此，本文提出attention的时间和空间的概念。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdlpl501wbj30so0cuab1.jpg" alt=""></p>
<p>原始的模型如上图（a），这个模型就是刚刚那篇论文的模型。本文对其首先进行如图（b）的改进，使得每次的attention根据当前的h而不是上一时刻的h来生成。其中，$x_t$是$y_{t-1}$的词向量。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdlpncja9kj30om0e4abg.jpg" alt=""></p>
<p>其次，引入了visual sentinel视觉哨兵，什么意思呢？</p>
<p>原始的经过CNN提取到的特征是$v_1….v_L$，每次计算attention权重$\alpha$的时候，我们用下面的公式<br>$$<br>z_t = w_h^Ttanh(W_vV+W_gh_tI^T)\\\alpha_t = softmax(z_t)<br>$$</p>
<p>其中，V是d*k维，表示k个图像特征；$h_t$是第t时刻的decoder的隐状态输出，是d*1维，$w_h$是k*1维的参数，两个W是k*d维的参数。</p>
<p>当引入视觉哨兵时，看上面的图，除了L个v向量，多了一个s向量，这个s的定义是</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdm4wfurm8j30ga03q74l.jpg" alt=""></p>
<p>可以看出，g是一个门系数，他由上一时刻的隐状态和当前的输入（前一个单词）决定，这个g控制当前的记忆m，记忆就是LSTM的记忆门输出，他包含了截止到目前的语义信息和图像信息。 上面的两个公式可以理解为：根据前一时刻的状态和输入，对当前的记忆进行加工（点乘），加工后的向量称作哨兵信息。</p>
<p>这个哨兵信息作为和CNN的图像特征v一起，进行attention计算，如果attention的重点在s哨兵，说明当前不需要关注图像信息，当前的输出单词可能是介词、连词之类的词。所以，新的attention系数公式如下。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdm59gq97lj30nm02uq3b.jpg" alt=""></p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdmgtyl5b4j30bc02mwek.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdm5f6tytxj30d802cmx7.jpg" alt=""></p>
<p>从而得到新的context信息。</p>
<h2 id="results"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h2><p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1feasdshgrrj31gk0ec79s.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这两篇论文都是对attention进行研究和改进，本质上还是没有解决exposure bias问题，而且原始的seq2seq用每一步生成单词的概率进行连乘，作为整个序列的概率，这一点也可以改进，下一文会介绍如何用强化学习来解决这两个问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章&lt;a href=&quot;https://liangguirong5.github.io/2017/03/01/image_caption/&quot;&gt;ImageCaption从入门到放弃之一_任务综述&lt;/a&gt;中引向paperweekly的链接，介绍了传统的基于seq2seq的caption模型，这个模型来自机器翻译，因此机器翻译中的attetion机制在我们的caption任务中也可以借鉴，很多论文就是围绕这个attention该怎么加而展开的，我们主要介绍下面两篇比较有代表性的论文：&lt;/p&gt;
    
    </summary>
    
      <category term="Caption" scheme="http://github.com/categories/Caption/"/>
    
    
      <category term="caption" scheme="http://github.com/tags/caption/"/>
    
      <category term="seq2seq" scheme="http://github.com/tags/seq2seq/"/>
    
  </entry>
  
  <entry>
    <title>ImageCaption从入门到放弃之一_任务综述</title>
    <link href="http://github.com/2017/03/01/ImageCaption%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E4%B8%80_%E4%BB%BB%E5%8A%A1%E7%BB%BC%E8%BF%B0/"/>
    <id>http://github.com/2017/03/01/ImageCaption从入门到放弃之一_任务综述/</id>
    <published>2017-03-01T12:29:52.000Z</published>
    <updated>2017-04-03T12:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文转载自paperweekly：</p>
<p>第二十二期的PaperWeekly对Image Captioning进行了综述。今天这篇文章中，我们会介绍一些近期的工作。（如果你对Image Captioning这个任务不熟悉的话，请移步二十二期<a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;mid=2247484014&amp;idx=1&amp;sn=4a053986f5dc8abb45097fed169465fa&amp;chksm=96e9ddeea19e54f83b717d63029a12715c238de8d6af261fa64af2d9b949480e685b8c283dda&amp;scene=21#wechat_redirect" target="_blank" rel="external">PaperWeekly 第二十二期—Image Caption任务综述</a>）</p>
<a id="more"></a>
<p>Image Captioning的模型一般是encoder-decoder的模型。模型对$p(S|I)$进行建模，$S$是描述，$I$是图片。模型的训练目标是最大化log似然：$\max_\theta\sum_i \log P(S_i|I_i, \theta)$。</p>
<p>然而使用最大似然训练有两个问题：</p>
<p>1、虽然训练时最大化后验概率，但是在评估时使用的测度则为BLEU，METEOR，ROUGE，CIDER等。这里有训练loss和评估方法不统一的问题。而且log似然可以认为对每个单词都给予一样的权重，然而实际上有些单词可能更重要一些（比如说一些表示内容的单词）。</p>
<p>2、第二个问题为Exposure bias。训练的时候，每个时刻的输入都是来自于真实的caption。而生成的时候，每个时刻的输入来自于前一时刻的输出；所以一旦有一个单词生成的不好，错误可能会接着传递，使得生成的越来越糟糕。</p>
<p>如何解决这两个问题呢？很显而易见的想法就是尽量使得训练和评估时的情形一样。我们可以在训练的时候不优化log似然，而是直接最大化CIDER（或者BLEU，METEOR，ROUGE等）。并且，在训练时也和测试时一样使用前一时刻的输入，而不是全使用ground truth输入。</p>
<p>然而这有什么难点呢？第一，CIDER或者这一些metric并不是可直接求导。（这就是为什么在分类问题中，我们把0-1 error近似成log loss，hinge loss的原因）。其次从前一时刻输出获得后一时刻的输入涉及到采样操作，这也是不可微的。为了能够解决这些不可微的问题，人们就想到了Reinforcement learning。</p>
<h1 id="rl基本概念"><a href="#RL基本概念" class="headerlink" title="RL基本概念"></a><strong>RL基本概念</strong></h1><p>RL中有一些比较重要的基本概念：状态（state），行为（action），回报（reward）和决策（policy）。决策是一个状态到动作的函数，一般是需要学习的东西。拿打游戏的例子介绍RL最简单。如果说是玩flappy bird，RL要学习的就是在什么位置跳，能使得最后得到的分数越高。在这个例子里，最后的分数就是回报，位置就是状态，跳或者不跳就是行为，而什么时候跳就是学到的策略。</p>
<p>如果放在Image captioning中，状态就是你看到的图片和已生成的单词，而动作就是下一个单词生成什么，回报就是CIDER等metric。</p>
<h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a><strong>相关文献</strong></h2><p>最近已经有很多工作将RL用在NLP相关的问题上。[1]第一次将REINFORCE算法用在image caption和seq2seq问题上。[5]将使用了更先进的RL算法 — Actor-critic — 来做machine translation上。[2,4]将[1]的算法进行稍许改进（仍旧是REINFORCE算法），使用在了image captioning上。[3]将REINFORCE用在序列生成GAN中，解决了之前序列生成器输出为离散不可微的问题。[6]将RL用在自然对话系统中。这篇文章中我们主要介绍[1,2,4]。</p>
<h2 id="rl算法背景"><a href="#RL算法背景" class="headerlink" title="RL算法背景"></a><strong>RL算法背景</strong></h2><p>这三篇文章使用的是REINFORCE算法，属于增强学习中Policy Gradient的一种。我们需要将deterministic的策略形式 $a=\pi(s,\theta)$转化为概率形式，$p(a) = \pi(a|s, \theta)$。Policy Gradient就是对参数$\theta$求梯度的方法。</p>
<p>直观的想，如果我们希望最后的决策能获得更高的reward，最简单的就是使得高reward的行为有高概率，低reward的行为有低概率。所以REINFORCE的更新目标为</p>
<p>$$\max_{\theta} \sum R(a,s)\log \pi(a|s, \theta)$$</p>
<p>$R(s,a)$是回报函数。有了目标，我们可以通过随机梯度下降来更新$\theta$来获得更大的回报。</p>
<p>然而这个方法有一个问题，训练时梯度的方差过大，导致训练不稳定。我们可以思考一下，如果reward的值为100到120之间，现在的方法虽然能更大地提高reward为120的行为的概率，但是也还是会提升低reward的行为的概率。所以为了克服这个问题，又有了REINFORCE with baseline。</p>
<p>$$\max_{\theta} \sum (R(a,s) - b(s))\log \pi(a|s, \theta)$$</p>
<p>$b(s)$在这里就是baseline，目的是通过给回报一个基准来减少方差。假设还是100到120的回报，我们将baseline设为110，那么只有100回报的行为就会被降低概率，而120回报的行为则会被提升概率。</p>
<h1 id="三篇paper"><a href="#三篇paper" class="headerlink" title="三篇paper"></a><strong>三篇paper</strong></h1><p>第一篇是FAIR在ICLR2016发表的[1]。这篇文章是第一个将RL的算法应用的离散序列生成的文章。文章中介绍了三种不同的方法，这里我们只看最后一种算法，Mixed Incremental Cross-Entropy Reinforce。</p>
<p>大体的想法就是用REINFORCE with baseline来希望直接优化BLEU4分数。具体训练的时候，他们先用最大似然方法做预训练，然后用REINFORCE finetune。在REINFORCE阶段，生成器不再使用任何ground truth信息，而是直接从RNN模型随机采样，最后获得采样的序列的BLEU4的分数r作为reward来更新整个序列生成器。</p>
<p>这里他们使用baseline在每个时刻是不同的；是每个RNN隐变量的一个线性函数。这个线性函数也会在训练中更新。他们的系统最后能比一般的的cross extropy loss，和scheduled sampling等方法获得更好的结果。</p>
<p>他们在github开源了基于torch的代码，<a href="https://github.com/facebookresearch/MIXER">https://github.com/facebookresearch/MIXER</a></p>
<p>第二篇论文是今年CVPR的投稿。这篇文章在[1]的基础上改变了baseline的选取。他们并没有使用任何函数来对baseline进行建模，而是使用了greedy decoding的结果的回报作为baseline。他们声称这个baseline减小了梯度的variance。</p>
<p>这个baseline理解起来也很简单：如果采样得到句子没有greedy decoding的结果好，那么降低这句话的概率，如果比greedy decoding还要好，则提高它的概率。</p>
<p>这个方法的好处在于避免了训练一个模型，并且这个baseline也极易获得。有一个很有意思的现象是，一旦使用了这样的训练方法，beam search和greedy decoding的结果就几乎一致了。</p>
<p>目前这篇文章的结果是COCO排行榜上第一名。他们使用CIDEr作为优化的reward，并且发现优化CIDEr能够使所有其他metric如BLEU，ROUGE，METEOR都能提高。</p>
<p>他们的附录中有一些captioning的结果。他们发现他们的模型在一些非寻常的图片上表现很好，比如说有一张手心里捧着一个长劲鹿的图。</p>
<p>第三篇论文[4]也是这次CVPR的投稿。这篇文章则是在$R(a,s)$这一项动了手脚。</p>
<p>前两篇都有一个共同特点，对所有时刻的单词，他们的$R(a,s)$都是一样的。然而这篇文章则给每个时刻的提供了不同的回报。</p>
<p>其实这个动机很好理解。比如说，定冠词a，无论生成的句子质量如何，都很容易在句首出现。假设说在一次采样中，a在句首，且最后的获得回报减去baseline后为负，这时候a的概率也会因此被调低，但是实际上大多数情况a对最后结果的好坏并没有影响。所以这篇文章采用了在每个时刻用$Q(w_{1:t})$来代替了原来一样的$R$。</p>
<p>这个$Q$的定义为，</p>
<p>$Q\theta(w{1:t}) = \mathbb{E}{w{t+1:T}}[R(w{1:t}, w{t+1:T})]$</p>
<p>也就是说，当前时刻的回报，为固定了前t个单词的期望回报。考虑a的例子，由于a作为句首生成的结果有好有坏，最后的Q值可能接近于baseline，所以a的概率也就不会被很大地更新。实际使用中，这个Q值可以通过rollout来估计：固定前t个词后，随机采样K个序列，取他们的平均回报作为Q值。文中K为3。这篇文章中的baseline则跟[1]中类似。</p>
<p>从实验结果上，第三篇并没有第二篇好，但是很大一部分原因是因为使用的模型和特征都比较老旧。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>将RL用在序列生成上似乎是现在新的潮流。但是现在使用的大多数的RL方法还比较简单，比如本文中的REINFORCE算法可追溯到上个世纪。RL本身也是一个很火热的领域，所以可以预计会有更多的论文将二者有机地结合。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h1><p>[1] Ranzato, Marc’Aurelio, Sumit Chopra, Michael Auli, and Wojciech Zaremba. “Sequence level training with recurrent neural networks.” arXiv preprint arXiv:1511.06732 (2015).</p>
<p>[2] Rennie, Steven J., Etienne Marcheret, Youssef Mroueh, Jarret Ross, and Vaibhava Goel. “Self-critical Sequence Training for Image Captioning.” arXiv preprint arXiv:1612.00563 (2016).</p>
<p>[3] Yu, Lantao, Weinan Zhang, Jun Wang, and Yong Yu. “Seqgan: sequence generative adversarial nets with policy gradient.” arXiv preprint arXiv:1609.05473 (2016).</p>
<p>[4] Liu, Siqi, Zhenhai Zhu, Ning Ye, Sergio Guadarrama, and Kevin Murphy. “Optimization of image description metrics using policy gradient methods.” arXiv preprint arXiv:1612.00370 (2016).</p>
<p>[5] Bahdanau, Dzmitry, Philemon Brakel, Kelvin Xu, Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron Courville, and Yoshua Bengio. “An actor-critic algorithm for sequence prediction.” arXiv preprint arXiv:1607.07086 (2016).</p>
<p>[6] Li, Jiwei, Will Monroe, Alan Ritter, Michel Galley, Jianfeng Gao, and Dan Jurafsky. “Deep reinforcement learning for dialogue generation.” arXiv preprint arXiv:1606.01541 (2016).</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文转载自paperweekly：&lt;/p&gt;
&lt;p&gt;第二十二期的PaperWeekly对Image Captioning进行了综述。今天这篇文章中，我们会介绍一些近期的工作。（如果你对Image Captioning这个任务不熟悉的话，请移步二十二期&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247484014&amp;amp;idx=1&amp;amp;sn=4a053986f5dc8abb45097fed169465fa&amp;amp;chksm=96e9ddeea19e54f83b717d63029a12715c238de8d6af261fa64af2d9b949480e685b8c283dda&amp;amp;scene=21#wechat_redirect&quot;&gt;PaperWeekly 第二十二期—Image Caption任务综述&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="Caption" scheme="http://github.com/categories/Caption/"/>
    
    
      <category term="caption" scheme="http://github.com/tags/caption/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯优化</title>
    <link href="http://github.com/2017/02/26/%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://github.com/2017/02/26/贝叶斯优化/</id>
    <published>2017-02-26T05:52:29.000Z</published>
    <updated>2017-03-18T09:31:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>贝叶斯优化可以用于复杂模型的调参过程中，可以自动确定一套表现最优的模型参数。本文是对贝叶斯优化方法的浅层解读，日后填坑~</p>
<a id="more"></a>
<h1 id="bayesian-optimization"><a href="#Bayesian-Optimization" class="headerlink" title="Bayesian Optimization"></a>Bayesian Optimization</h1><p>当对目标函数没有封闭形式的表达，但是可以得到目标函数在采样点的观测值时，可以用贝叶斯优化来寻找目标函数的极值。</p>
<p>优势在于需要较少的采样点，适合观测值costly的对象。</p>
<p>贝叶斯优化根据下面的acqusition function来选取下一个采样点的位置:<br>$$<br>x_t=argmax_{x \in D}\mu_{t-1}(x)+\beta^{1/2}\sigma_{t-1}(x)<br>$$<br>首先用已有观测值构建高斯过程回归模型，并预测输入位置上的未知函数值服从的的高斯分布，得到该点均值和方差，即$\mu_{t-1}(x)$和$\sigma_{t-1}(x)$。上式的$\beta_t$是一个权重参数，具体设置参见论文：Gaussian Process Optimization in the Bandit Setting: No Regret and Experimental Design.</p>
<p>这个公式描述的是，如果标准差大，表示我们对该点了解程度小，值得探索(exploration)；如果均值大，表明该点可能就是我们要找的最大值点，值得开发(exploitation)。一开始，我们的采样数据很少，算法会去采样标准差很大的点；当采样的点多了，标准差会降低，算法偏向于去均值大的点，最终收敛到全局最优值。</p>
<h1 id="gaussian-process-regression"><a href="#Gaussian-Process-Regression" class="headerlink" title="Gaussian Process Regression"></a>Gaussian Process Regression</h1><p>关于高斯过程回归的知识可以参考下面两个链接，互为补充。</p>
<p><a href="http://blog.sina.com.cn/s/blog_5033f3b40102vts4.html" target="_blank" rel="external">高斯过程回归</a></p>
<p><a href="http://www.kuqin.com/shuoit/20150508/345958.html" target="_blank" rel="external">说说高斯过程回归</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贝叶斯优化可以用于复杂模型的调参过程中，可以自动确定一套表现最优的模型参数。本文是对贝叶斯优化方法的浅层解读，日后填坑~&lt;/p&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://github.com/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://github.com/tags/DeepLearning/"/>
    
      <category term="模型调参" scheme="http://github.com/tags/%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>五年梯度三年下降</title>
    <link href="http://github.com/2017/02/20/%E4%BA%94%E5%B9%B4%E6%A2%AF%E5%BA%A6%E4%B8%89%E5%B9%B4%E4%B8%8B%E9%99%8D/"/>
    <id>http://github.com/2017/02/20/五年梯度三年下降/</id>
    <published>2017-02-20T12:29:52.000Z</published>
    <updated>2017-03-19T08:28:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>梯度下降，是当下最常见的神经网络参数调优算法。当我们需要最小化目标函数$J(\theta)$时，只需要沿着目标函数梯度的$\nabla_\theta J(\theta)$反方向去更新$\theta$，就能让目标函数越来越小。如果$J(\theta)$是凸函数（二次导数非负），那最后一定能收敛到全局最小值，否则可能收敛到局部最小值。</p>
<a id="more"></a>
<p>梯度下降的原理，学过二次函数曲线的高中生就看懂，不过也可以用泰勒展开加以证明：<br>$$<br>J(\theta+\Delta\theta) \approx J(\theta)+\nabla_\theta J(\theta)\Delta\theta<br>$$<br>我们要求每次更新$J$都要减小，所以必然有$J(\theta+\Delta\theta) - J(\theta)&lt;0$，进而要求展式的一阶项恒小于零，可选择令<br>$$<br>\Delta\theta = -\alpha\nabla_\theta J(\theta)<br>$$<br>其中，步长$\alpha$是一个小的正常数，这就是梯度下降法。</p>
<p>如果把上面的泰勒展式写到二阶项：<br>$$<br>J(\theta+\Delta\theta) \approx J(\theta)+\nabla_\theta J(\theta)\Delta\theta+\nabla_{\theta}^2 J(\theta)\Delta\theta^2<br>$$<br>就可以推导出牛顿法，步长更新是一阶导与二阶导的比值的相反数。</p>
<h1 id="三类梯度下降"><a href="#三类梯度下降" class="headerlink" title="三类梯度下降"></a>三类梯度下降</h1><p>三种梯度下降区别在于：选择用多少数据来计算目标函数的梯度。</p>
<h2 id="batch-gradient-descent"><a href="#Batch-gradient-descent" class="headerlink" title="Batch gradient descent"></a>Batch gradient descent</h2><p>又称Vanilla gradient descend，根据整个训练样本集来更新参数$\theta$,<br>$$<br>θ=θ−η⋅∇θJ(θ)<br>$$<br>因为我们每次更新都需要整个训练数据集参与计算，所以速度很慢，如果训练样本很多以至于不能放在内存，这种方法便无计可施了。此外，batch梯度法不能在线更新权值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</div><div class="line">  params_grad = evaluate_gradient(loss_function, data, params)</div><div class="line">  params = params - learning_rate * params_grad</div></pre></td></tr></table></figure>
<h2 id="stochastic-gradient-descent"><a href="#Stochastic-gradient-descent" class="headerlink" title="Stochastic gradient descent"></a>Stochastic gradient descent</h2><p>SGD即为随机梯度下降，每次权值更新只用到一个训练样本：<br>$$<br>θ=θ−η⋅∇θJ(θ;x(i);y(i))<br>$$<br>相比于batch方法，我们的SGD小朋友每次只用一个样本，及时更新权重，因此收敛的会更快，可以用于在线学习。SGD在训练中会表现出周期性的波动，如下图所示。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f3/Stogra.png" alt=""></p>
<p>这种抖动一方面使得训练中可以跳出局部最小，从而进入更好的位置进行梯度下降；另一方面可能造成收敛的难度加大，因为SGD总是容易冲过头。</p>
<p>但是如果慢慢的减小学习率的话，SGD还是可以同batch一样的收敛的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</div><div class="line">  np.random.shuffle(data)</div><div class="line">  <span class="keyword">for</span> example <span class="keyword">in</span> data:</div><div class="line">    params_grad = evaluate_gradient(loss_function, example, params)</div><div class="line">    params = params - learning_rate * params_grad</div></pre></td></tr></table></figure>
<h2 id="mini-batch-gradient-descent"><a href="#Mini-batch-gradient-descent" class="headerlink" title="Mini-batch gradient descent"></a>Mini-batch gradient descent</h2><p>随机多样本梯度下降，集合了上面两种方法的特点，更新公式如下：<br>$$<br>θ=θ−η⋅∇θJ(θ;x^{(i:i+n)};y^{(i:i+n)})<br>$$<br>这种更新方式，不像SGD一样每次更新的幅度很大，从而更易于收敛。常见的batchsize是50~256。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</div><div class="line">  np.random.shuffle(data)</div><div class="line">  <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</div><div class="line">    params_grad = evaluate_gradient(loss_function, batch, params)</div><div class="line">    params = params - learning_rate * params_grad</div></pre></td></tr></table></figure>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>学习率很难选取，太大难以收敛，太小收敛慢；变学习率的变化规则也难以适应所有数据集；此外，所有的特征不一定需要同一个学习率；最后，马鞍面产生的0梯度问题，SGD也没法解决。</p>
<h1 id="改进算法"><a href="#改进算法" class="headerlink" title="改进算法"></a>改进算法</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梯度下降，是当下最常见的神经网络参数调优算法。当我们需要最小化目标函数$J(\theta)$时，只需要沿着目标函数梯度的$\nabla_\theta J(\theta)$反方向去更新$\theta$，就能让目标函数越来越小。如果$J(\theta)$是凸函数（二次导数非负），那最后一定能收敛到全局最小值，否则可能收敛到局部最小值。&lt;/p&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://github.com/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://github.com/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>字符编码以及python中的编码解码问题</title>
    <link href="http://github.com/2017/02/20/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://github.com/2017/02/20/字符编码/</id>
    <published>2017-02-20T04:20:11.000Z</published>
    <updated>2017-09-13T01:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>计算机中，字符包括字素，类似字素的单元，可书写语言中的字母表、音节表等。例如：字母，从0到9的数字，常用标点符号，空白符，控制符等。中文的你、我、他，日文的に、ほ、ん、ご也都是字符。</p>
<a id="more"></a>
<h1 id="仓颉造字ascii码"><a href="#仓颉造字：ASCII码" class="headerlink" title="仓颉造字：ASCII码"></a>仓颉造字：ASCII码</h1><p>我们知道，八位二进制数可以表示256种状态，美国的编码标准——<strong>ASCII</strong>码，根据这一点规定了128个字符的编码，这128个符号的第一位都是0，用后七位进行编码。这128个字符一共包括：</p>
<ol>
<li>32个<strong>控制字符</strong>：0~31，如ESC，二进制表示为00011011</li>
<li><strong>空格(space)</strong>：32，二进制表示为00100000；<strong>DEL</strong>，127，二进制表示为01111111。</li>
<li><strong>标点以及运算符</strong>：33~47，58~64，91~96，123~126，如’+’表示为00101011。</li>
<li><strong>数字</strong>：48~57。</li>
<li><strong>字母</strong>：大写是65~90，小写是97~122。</li>
</ol>
<h1 id="百家争鸣其他编码"><a href="#百家争鸣：其他编码" class="headerlink" title="百家争鸣：其他编码"></a>百家争鸣：其他编码</h1><p>ASCII码只能表示128个字符，对于其他国家的语言不适用，比如法语中的é就无法用ASCII表示。于是，一些欧洲国家决定充分利用ASCII码中闲置的最高位，这样法语中的é可以编码为10000010。这样，这些欧洲国家的编码体系最多支持2^8=256个字符。</p>
<p>但是这样似乎是饮鸩止渴，不同的国家都有不同字符，如果他们都是利用ASCII码的最高位来扩展能表达的字符个数，就会遇见编码相同但代表字符不同的情况。比如法语中编码10000010代表é，而在希伯来语编码中却代表了字母Gimel (ג)，在俄语中又会代表另一个字符。</p>
<p>另外，许多国家的字符数太过于庞大了，比如汉字就多达10万左右。这个时候必须使用多个字节(一个字节8个bit)。比如，简体中文的常见编码是<strong>GB2312</strong>，使用两个字节表示一个汉字，所以理论上可以表示65536个字符。</p>
<p>注意：GB类汉字编码与后问的Unicode、UTF-8毫无关系。</p>
<h1 id="标准一统unicode"><a href="#标准一统：Unicode" class="headerlink" title="标准一统：Unicode"></a>标准一统：Unicode</h1><p>Unicode是一种统一的编码，囊括了各国所有的字符，因而也会有占用过多字节的问题存在。python中的字符串就是unicode编码，如u‘I am a string’，而我们所认为的str类型实际则是字节串。什么意思呢，如果一个字符串前面不加字母u，会被python按照默认的编码方式进行编码（encode），也叫隐式编码。linux下默认的编码方式是utf-8，windows下不是。具体参见这篇文章<a href="http://selfboot.cn/2016/12/28/py_encode_decode/" target="_blank" rel="external">Python2.x 字符编码终极指南</a>。</p>
<h1 id="发扬光大utf-8"><a href="#发扬光大：UTF-8" class="headerlink" title="发扬光大：UTF-8"></a>发扬光大：UTF-8</h1><p>utf-8是一种变字长的编码方式，解决了刚才提到的unicode的浪费内存问题，具体编码规则可以参考文章<a href="http://selfboot.cn/2014/08/28/character_encoding/#百花齐放之中文编码" target="_blank" rel="external"><strong>人机交互之字符编码</strong></a>。</p>
<p>常见中文的utf-8表示是占用3个字节的，下面用python3来进行编码解码说明。</p>
<p>在python3中，所有字符都是默认unicode编码，例如’ABC’ ,’中文’二者都是unicode编码，可以直接print()。而b’ABC’, b’\xe4\xb8\xad\xe6\x96\x87’则是’ABC’ ,’中文’的二进制码，用encode可以把unicode码编码成二进制码，用decode可以把二进制码，解码成自己想要的或是ASCII码或是utf-8码。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 'ABC'.encode('ascii')</div><div class="line">b'ABC'</div><div class="line">&gt;&gt;&gt; '中文'.encode('utf-8')</div><div class="line">b'\xe4\xb8\xad\xe6\x96\x87'</div><div class="line">&gt;&gt;&gt; '中文'.encode('ascii')</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)</div><div class="line">&gt;&gt;&gt; b'ABC'.decode('ascii')</div><div class="line">'ABC'</div><div class="line">&gt;&gt;&gt; b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')</div><div class="line">'中文'</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机中，字符包括字素，类似字素的单元，可书写语言中的字母表、音节表等。例如：字母，从0到9的数字，常用标点符号，空白符，控制符等。中文的你、我、他，日文的に、ほ、ん、ご也都是字符。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://github.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://github.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C++之构造函数详解</title>
    <link href="http://github.com/2017/02/05/C-%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://github.com/2017/02/05/C-之构造函数/</id>
    <published>2017-02-05T14:24:23.000Z</published>
    <updated>2017-02-20T10:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>当Richard类的对象被创建时，自动调用相应的Richard()构造函数，对成员变量进行初始化，这就是构造函数。</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">class</span> <span class="title">Richard</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">  		Richard()</div><div class="line">          &#123;</div><div class="line">            m_val=<span class="number">1</span>;</div><div class="line">          &#125;</div><div class="line">  	<span class="keyword">private</span>:</div><div class="line">  		<span class="keyword">int</span> m_val;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="构造函数的分类"><a href="#构造函数的分类" class="headerlink" title="构造函数的分类"></a>构造函数的分类</h1><p>构造函数可以分为无参数构造函数、一般构造函数、拷贝构造函数、类型转换构造函数。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Complex </div><div class="line">&#123;         </div><div class="line"></div><div class="line"><span class="keyword">private</span> :</div><div class="line">        <span class="keyword">double</span>    m_real;</div><div class="line">        <span class="keyword">double</span>    m_imag;</div><div class="line"><span class="keyword">public</span> :</div><div class="line">		无参数；</div><div class="line">		一般；</div><div class="line">		拷贝构造；</div><div class="line">		类型转换；</div><div class="line">		等号运算符重载(不属于构造函数)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="无参数构造函数"><a href="#无参数构造函数" class="headerlink" title="无参数构造函数"></a>无参数构造函数</h2><p>如果在一个类中没有写明构造函数，系统会自动生成无参数构造函数，函数为空，什么都不做。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Complex()</div><div class="line">&#123;</div><div class="line">	m_real = <span class="number">0.0</span>;</div><div class="line">	m_imag = <span class="number">0.0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一般构造函数"><a href="#一般构造函数" class="headerlink" title="一般构造函数"></a>一般构造函数</h2><p>一般构造函数可以有各种参数形式，一个类可以有多个一般构造函数，前提是参数的个数或者类型不同（基于c++的重载函数原理）</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Complex(<span class="keyword">double</span> real, <span class="keyword">double</span> imag)</div><div class="line">&#123;</div><div class="line">	m_real = real;</div><div class="line">	m_imag = imag;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>拷贝构造函数是类对象本身的引用，用于根据一个已存在的对象复制出一个心得该类对象，一般在函数中会将已存在的对象数据成员的值复制一份，到新创建的对象中。</p>
<p>若果没有显示的写出拷贝构造函数，系统会创建一个默认的，但是这是会造成浅拷贝，如需深拷贝则需自己编写。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Complex(<span class="keyword">const</span> Complex&amp; c)</div><div class="line">  &#123;</div><div class="line">    m_real = c.m_real;</div><div class="line">    m_imag = c.m_imag;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>注意：等号运算符重载和拷贝构造函数是有区别的，将=右边的本类对象的值复制给等号左边的对象，它不属于构造函数，等号左右两边的对象必须已经被创建。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Complex&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Complex&amp; rhs)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;rhs)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line">  	<span class="keyword">this</span>-&gt;m_real = rhs.m_real;</div><div class="line">  	<span class="keyword">this</span>-&gt;m_imag = rhs.m_imag;</div><div class="line">  	<span class="keyword">return</span> *<span class="keyword">this</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a>类型转换构造函数</h2><p>根据一个指定的类型的对象创建一个本类的对象，例如：下面将根据一个double类型的对象创建了一个Complex对象。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Complex(<span class="keyword">double</span> r)</div><div class="line">&#123;</div><div class="line">    m_real = r;</div><div class="line">    m_imag = <span class="number">0.0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类型转换构造函数，只能有一个参数，该参数为待转换的类型。下面举一个例子，执行语句</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Complex c2;</div><div class="line">c2 = <span class="number">5.2</span>;</div></pre></td></tr></table></figure>
<p>第一行调用无参数构造函数；第二行中，先对5.2进行doule到complex的强制转换，也就是调用类型转换构造函数，然后在调用等号赋值。</p>
<h1 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h1><p><a href="http://blog.csdn.net/tiantang46800/article/details/6938762" target="_blank" rel="external">c++类的构造函数详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h1&gt;&lt;p&gt;当Richard类的对象被创建时，自动调用相应的Richard()构造函数，对成员变量进行初始化，这就是构造函数。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://github.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://github.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++之初始化列表</title>
    <link href="http://github.com/2017/02/03/C-%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
    <id>http://github.com/2017/02/03/C-之初始化列表/</id>
    <published>2017-02-03T07:31:41.000Z</published>
    <updated>2017-02-20T10:18:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是初始化列表"><a href="#什么是初始化列表" class="headerlink" title="什么是初始化列表"></a>什么是初始化列表</h1><p>初始化列表是构造函数的一个组成部分，可以有可以没有，因此构造函数包括：函数体、参数列表、函数名以及初始化列表。</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> foo</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">  	<span class="keyword">int</span> id;</div><div class="line">  	foo(<span class="built_in">string</span> s, <span class="keyword">int</span> i):name(s),id(i)&#123;&#125;;</div><div class="line">  &#125;;</div><div class="line"><span class="keyword">class</span> C: <span class="keyword">public</span> B2, <span class="keyword">public</span> B1, <span class="keyword">public</span> B3</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    C(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d):B1(a), memberB2(d), memberB1(c),B2(b)&#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    B1 memberB1;</div><div class="line">    B2 memberB2;</div><div class="line">    B3 memberB3;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="初始化列表的作用"><a href="#初始化列表的作用" class="headerlink" title="初始化列表的作用"></a>初始化列表的作用</h1><p>初始化列表的作用是对成员变量进行赋值，当然也可以在函数体里面进行赋值操作，但是对于class类型的成员变量，用初始化列表来赋值可以减少一次默认构造的过程，从而提高性能。下面两段代码解释为什么可以减少默认构造。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Test2</div><div class="line">&#123;</div><div class="line">    Test1 test1 ;</div><div class="line">    Test2(Test1 &amp;t1)</div><div class="line">    &#123;</div><div class="line">        test1 = t1 ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Test2</div><div class="line">&#123;</div><div class="line">    Test1 test1 ;</div><div class="line">    Test2(Test1 &amp;t1):test1(t1)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分别执行如下代码</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test1 t1 ;</div><div class="line"><span class="function">Test2 <span class="title">t2</span><span class="params">(t1)</span> </span>;</div></pre></td></tr></table></figure>
<p>对于第一段代码，要先初始化test1，也就是先调用类Test1的默认构造函数，然后调用赋值构造函数（等号重载）；对于第二段代码，只需要直接调用类Test1的拷贝构造函数，对test2进行初始化，因此初始化列表可以减少一次默认初始化。</p>
<h1 id="必须使用初始化列表的情况"><a href="#必须使用初始化列表的情况" class="headerlink" title="必须使用初始化列表的情况"></a>必须使用初始化列表的情况</h1><p>同时，根据上面的例子我们可以知道，当Test1类没有默认构造函数时，我们必须采用初始化列表的方式。</p>
<h1 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h1><p><a href="http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html" target="_blank" rel="external">C++初始化列表</a></p>
<p><a href="http://blog.csdn.net/jiangnanyouzi/article/details/3721091" target="_blank" rel="external">虚基类实现机制</a></p>
<p><a href="http://www.cnblogs.com/fzhe/archive/2012/12/25/2832250.html" target="_blank" rel="external">C++的继承与派生</a></p>
<p>PS：</p>
<p>（1）调用虚函数时，因为是动态绑定，所以根据指针指向的对象的实际类型来决定。</p>
<p>（2）调用非虚函数，静态绑定，所以根据表面上看到的类的类型来决定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是初始化列表&quot;&gt;&lt;a href=&quot;#什么是初始化列表&quot; class=&quot;headerlink&quot; title=&quot;什么是初始化列表&quot;&gt;&lt;/a&gt;什么是初始化列表&lt;/h1&gt;&lt;p&gt;初始化列表是构造函数的一个组成部分，可以有可以没有，因此构造函数包括：函数体、参数列表、函数名以及初始化列表。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://github.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://github.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1-20</title>
    <link href="http://github.com/2017/02/02/leetcode1-20/"/>
    <id>http://github.com/2017/02/02/leetcode1-20/</id>
    <published>2017-02-02T03:43:24.000Z</published>
    <updated>2018-01-03T15:07:28.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-two-sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h1><p>相似题目：15、16、18</p>
<p>给定一个数组，在输入一个指定的目标值后，返回数组中相加等于目标值的两个元素的下标。</p>
<p>可以假定每个输入都有一个解，并且不能重复使用同一个的元素。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure>
<h2 id="python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> len(nums)&lt;=<span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        w_dict = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> w_dict:</div><div class="line">                <span class="keyword">return</span> [w_dict[target - nums[i]], i]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                w_dict[nums[i]] = i</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> want = target-nums[i];</div><div class="line">            <span class="keyword">if</span> (hash.find(want)!=hash.end())</div><div class="line">            &#123;</div><div class="line">                result.push_back(hash[want]);</div><div class="line">                result.push_back(i);</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            hash[nums[i]]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="2-add-two-numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h1><p>给定两个非空链表，分别代表两个非负整数。其中的数字按逆序存储，每一个节点都只有一个数字。输入两个这样的链表，返回两数之和，同样用链表表示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">Output: 7 -&gt; 0 -&gt; 8</div></pre></td></tr></table></figure>
<h2 id="python"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        up = <span class="number">0</span></div><div class="line">        ans=temp = ListNode(<span class="number">0</span>)</div><div class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> up:</div><div class="line">            v1=v2=<span class="number">0</span></div><div class="line">            <span class="keyword">if</span> l1:</div><div class="line">                v1 = l1.val</div><div class="line">                l1 = l1.next</div><div class="line">            <span class="keyword">if</span> l2:</div><div class="line">                v2 = l2.val</div><div class="line">                l2 = l2.next</div><div class="line">            up, val = divmod(v1+v2+up, <span class="number">10</span>)</div><div class="line">            temp.next = ListNode(val)</div><div class="line">            temp = temp.next</div><div class="line">        <span class="keyword">return</span> ans.next</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> up = <span class="number">0</span>;</div><div class="line">        <span class="function">ListNode <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode *p = &amp;ans;</div><div class="line">        <span class="keyword">while</span> (l1||l2||up)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> v1=<span class="number">0</span>,v2=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (l1)</div><div class="line">            &#123;</div><div class="line">                v1=l1-&gt;val;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (l2)</div><div class="line">            &#123;</div><div class="line">                v2 = l2-&gt;val;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> sum = v1+v2+up;</div><div class="line">            up = sum/<span class="number">10</span>;</div><div class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="3longest-substring-without-repeating-characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3.Longest Substring Without Repeating Characters"></a>3.Longest Substring Without Repeating Characters</h1><p>给定一个字符串，输出它的最长无重复字符子串的长度。</p>
<p>思路是哈希表加上双指针，进行遍历。</p>
<h2 id="python"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ans = <span class="number">0</span></div><div class="line">        old_start = <span class="number">0</span></div><div class="line">        record=&#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> record:</div><div class="line">                new_start = record[s[i]]+<span class="number">1</span></div><div class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(old_start,new_start):</div><div class="line">                    <span class="keyword">del</span> record[j]</div><div class="line">                old_start = new_start</div><div class="line">            ans = max(ans,i-old_start+<span class="number">1</span>)</div><div class="line">            record[s[i]]=i</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-2" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, j=<span class="number">0</span>;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; record;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (record.find(s[i])!=record.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = record[s[i]]+<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ii=j;ii&lt;temp;ii++)</div><div class="line">                &#123;</div><div class="line">                    record.erase(record.find(s[ii]));</div><div class="line">                &#125;</div><div class="line">                j = temp;</div><div class="line">            &#125;</div><div class="line">            ans = max(ans, i-j+<span class="number">1</span>);</div><div class="line">            record[s[i]]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="4median-of-two-sorted-arrays"><a href="#4-Median-of-Two-Sorted-Arrays" class="headerlink" title="4.Median of Two Sorted Arrays"></a>4.Median of Two Sorted Arrays</h1><p>给定两个排好序的数组，寻找这两个数组的中位数。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line"></div><div class="line">The median is 2.0</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line"></div><div class="line">The median is (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure>
<p>思路是按照奇偶性分别进行中位数查询，查询的策略是二分搜索，代码如下。</p>
<h2 id="python"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums1: List[int]</div><div class="line">        :type nums2: List[int]</div><div class="line">        :rtype: float</div><div class="line">        """</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(A, B, k)</span>:</span></div><div class="line">            m = len(A)</div><div class="line">            n = len(B)</div><div class="line">            <span class="keyword">if</span> m&lt;n:</div><div class="line">                <span class="keyword">return</span> binary_search(B,A,k)</div><div class="line">            <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">                <span class="keyword">return</span> A[k<span class="number">-1</span>]</div><div class="line">            <span class="keyword">if</span> k==<span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> min(A[<span class="number">0</span>],B[<span class="number">0</span>])</div><div class="line">            b = min(n, k/<span class="number">2</span>)</div><div class="line">            a = k-b</div><div class="line">            <span class="keyword">if</span> A[a<span class="number">-1</span>]&lt;B[b<span class="number">-1</span>]:</div><div class="line">                <span class="keyword">return</span> binary_search(A[a:],B,k-a)</div><div class="line">            <span class="keyword">elif</span> A[a<span class="number">-1</span>]&gt;B[b<span class="number">-1</span>]:</div><div class="line">                <span class="keyword">return</span> binary_search(A,B[b:],k-b)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> A[a<span class="number">-1</span>]</div><div class="line">        total = len(nums1)+len(nums2)</div><div class="line">        <span class="keyword">if</span> total%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> (binary_search(nums1, nums2, total/<span class="number">2</span>)+\</div><div class="line">                 binary_search(nums1, nums2, total/<span class="number">2</span>+<span class="number">1</span>))/<span class="number">2.0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> binary_search(nums1, nums2, total/<span class="number">2</span>+<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-3" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; forward_delete(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> k)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=A.begin();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">        &#123;</div><div class="line">            it = A.erase(it);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> A;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B,<span class="keyword">int</span> k)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = <span class="keyword">int</span>(A.size());</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span> (B.size());</div><div class="line">        <span class="keyword">if</span> (m&lt;n)</div><div class="line">            <span class="keyword">return</span> binary_search(B,A,k);</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> A[k<span class="number">-1</span>];</div><div class="line">        <span class="keyword">if</span> (k==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> min(A[<span class="number">0</span>],B[<span class="number">0</span>]) ;</div><div class="line">        <span class="keyword">int</span> b = min(k/<span class="number">2</span>,n) ;</div><div class="line">        <span class="keyword">int</span> a = k-b;</div><div class="line">        <span class="keyword">if</span> (A[a<span class="number">-1</span>]&lt;B[b<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = forward_delete(A,a);</div><div class="line">            <span class="keyword">return</span> binary_search(C,B,k-a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[a<span class="number">-1</span>]&gt;B[b<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = forward_delete(B,b);</div><div class="line">            <span class="keyword">return</span> binary_search(A,C,k-b);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> A[a<span class="number">-1</span>];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total = <span class="keyword">int</span>(nums1.size()+nums2.size());</div><div class="line">        <span class="keyword">if</span> (total%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">double</span> a = binary_search(nums1,nums2,total/<span class="number">2</span>);</div><div class="line">            <span class="keyword">double</span> b=binary_search(nums1,nums2,total/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span> (a+b)/<span class="number">2.0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> binary_search(nums1,nums2,total/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="5longest-palindromic-substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5.Longest Palindromic Substring"></a>5.Longest Palindromic Substring</h1><p>寻找给点字符串中的最长回文子串。</p>
<p>采用动态规划的方法，从左到右进行回文串判定以及是否为最长判定，如果是最长，就记录此时的left、right位置，最终输出s[left:right].</p>
<h2 id="python"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        n = len(s)</div><div class="line">        dq = [[<span class="number">0</span> <span class="keyword">for</span> ii <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">        length = <span class="number">0</span></div><div class="line">        left =<span class="number">0</span></div><div class="line">        right =<span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</div><div class="line">                <span class="keyword">if</span> s[i]==s[j] <span class="keyword">and</span> (i-j&lt;=<span class="number">2</span> <span class="keyword">or</span> dq[j+<span class="number">1</span>][i<span class="number">-1</span>]==<span class="number">1</span>) :</div><div class="line">                    dq[j][i]=<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> length&lt;i-j+<span class="number">1</span>:</div><div class="line">                        length=i-j+<span class="number">1</span></div><div class="line">                        left=j</div><div class="line">                        right=i</div><div class="line">        <span class="keyword">return</span> s[left:right+<span class="number">1</span>]</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-4" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length=<span class="number">0</span>,left=<span class="number">0</span>,right=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=s.length();</div><div class="line">        <span class="keyword">int</span> dq[n][n]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (s[j]==s[i] &amp;&amp; (i-j&lt;=<span class="number">2</span>||dq[j+<span class="number">1</span>][i<span class="number">-1</span>])) </div><div class="line">                &#123;</div><div class="line">                    dq[j][i]=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (length&lt;i-j+<span class="number">1</span>)</div><div class="line">                    &#123;</div><div class="line">                        length=i-j+<span class="number">1</span>;</div><div class="line">                        left=j;</div><div class="line">                        right=i;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.substr(left,right-left+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="6zigzag-conversion"><a href="#6-ZigZag-Conversion" class="headerlink" title="6.ZigZag Conversion"></a>6.ZigZag Conversion</h1><p>把字符串先写成折线结构，例如字符串”PAYPALISHIRING”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>然后输出横向读取的结果：”PAHNAPLSIIGYIR”</p>
<h2 id="python"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h2><p>自己想的是，先把字符串按照numRows的长度进行切片，没有的位置补上空格‘ ’，每个切片是折线方向的顺序，然后再把每个切片中第一的元素拼起来，第二个元素拼起来，就完成的横向连接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        left=<span class="number">0</span></div><div class="line">        c = []</div><div class="line">        <span class="keyword">if</span> numRows&lt;=<span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> s</div><div class="line">        <span class="keyword">while</span> left&lt;len(s):</div><div class="line">            right = left+numRows</div><div class="line">            <span class="keyword">if</span> right&gt;=len(s):</div><div class="line">                c.append(s[left:len(s)]+<span class="string">' '</span>*(right-len(s)))</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                c.append(s[left:right])</div><div class="line">                left = right</div><div class="line">                right += numRows<span class="number">-2</span></div><div class="line">                <span class="keyword">if</span> right&gt;=len(s):</div><div class="line">                    temp = <span class="string">' '</span>+s[left:len(s)]+<span class="string">' '</span>*(right-len(s)) +<span class="string">' '</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    temp = <span class="string">' '</span>+s[left:right]+<span class="string">' '</span></div><div class="line">                c.append(temp[::<span class="number">-1</span>])</div><div class="line">                left = right</div><div class="line">        r = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">            r+=<span class="string">''</span>.join([sec[i] <span class="keyword">for</span> sec <span class="keyword">in</span> c <span class="keyword">if</span> sec[i]!=<span class="string">' '</span>])</div><div class="line">        <span class="keyword">return</span> r</div></pre></td></tr></table></figure>
<p>但是这种方法并不简洁，其实可以直接把原字符串按照从左到右的顺序存储在横向数组中，最后把横向数组的元素拼接即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> numRows==<span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> s</div><div class="line">        r = [<span class="string">''</span>] * numRows</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(s):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(numRows):</div><div class="line">                <span class="keyword">if</span> i &gt;= len(s):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                r[j] += s[i]</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(numRows - <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">                <span class="keyword">if</span> i &gt;= len(s):</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                r[j] += s[i]</div><div class="line">                i+=<span class="number">1</span></div><div class="line">        ans =<span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,numRows):</div><div class="line">            ans += r[i]</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-5" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        <span class="built_in">string</span> r[numRows];</div><div class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; s.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;numRows &amp;&amp; i&lt;s.size(); j++) r[j]+=s[i++];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=numRows<span class="number">-2</span>;j&gt;<span class="number">0</span> &amp;&amp; i&lt;s.size() ; j--) r[j]+=s[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">string</span> ans=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            ans+=r[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="7reverse-integer"><a href="#7-Reverse-Integer" class="headerlink" title="7.Reverse Integer"></a>7.Reverse Integer</h1><p>把一个整型数进行反转，例如123变成321。</p>
<p>需要注意的点事要能处理负数，同时100变成1而不是001。此外，翻转后的数字不能溢出，要满足有符号32位整型的范围。</p>
<h2 id="python"><a href="#Python-6" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        c=<span class="number">0</span></div><div class="line">        s=<span class="number">1</span></div><div class="line">        <span class="keyword">if</span> x&lt;<span class="number">0</span>:</div><div class="line">            x=-x</div><div class="line">            s=<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> x!=<span class="number">0</span>:</div><div class="line">            c = <span class="number">10</span>*c + x%<span class="number">10</span></div><div class="line">            x = x/<span class="number">10</span></div><div class="line">        <span class="keyword">return</span> c*s <span class="keyword">if</span> c&lt;<span class="number">2147483648</span> <span class="keyword">and</span> c&gt;<span class="number">-2147483648</span> <span class="keyword">else</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-6" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>,c=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (isOverflow(x)) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            x=-x;</div><div class="line">            flag=<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            c=c*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">            x=x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        c=c*flag;</div><div class="line">        <span class="keyword">if</span> (c&lt;INT32_MAX &amp;&amp; c&gt;INT32_MIN)</div><div class="line">            <span class="keyword">return</span> c ;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isOverflow</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(x/<span class="number">1000000000</span>==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x==INT32_MIN)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        x = <span class="built_in">abs</span>(x);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cmp=<span class="number">463847412</span>; cmp!=<span class="number">0</span>; cmp/=<span class="number">10</span>,x/=<span class="number">10</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (x%<span class="number">10</span>&gt;cmp%<span class="number">10</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x%<span class="number">10</span>&lt;cmp%<span class="number">10</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="8string-to-integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8.String to Integer (atoi)"></a>8.String to Integer (atoi)</h1><p>把字符串格式的数字转换成整型并输出。</p>
<p>需要注意的情况是：字符串前面的空格要去除；数字前面可能有正负号；数字后的其他字符作为截断位置，不需要再往后读取；如果数字超过INT_MAX或INT_MIN，那么输出INT_MAX或者INT_MIN。</p>
<h2 id="python"><a href="#Python-7" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        pos = <span class="number">0</span></div><div class="line">        flag = <span class="number">1</span></div><div class="line">        ans=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> pos&lt;len(str) <span class="keyword">and</span> str[pos]==<span class="string">' '</span>: pos+=<span class="number">1</span></div><div class="line">        <span class="keyword">if</span> pos&lt;len(str) <span class="keyword">and</span> str[pos]==<span class="string">'-'</span>:</div><div class="line">            flag=<span class="number">-1</span></div><div class="line">            pos+=<span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> pos&lt;len(str) <span class="keyword">and</span> str[pos]==<span class="string">'+'</span>:</div><div class="line">            pos+=<span class="number">1</span></div><div class="line">        <span class="keyword">while</span> pos&lt;len(str):</div><div class="line">            <span class="keyword">if</span> str[pos]&lt;=<span class="string">'9'</span> <span class="keyword">and</span> str[pos]&gt;=<span class="string">'0'</span>:</div><div class="line">                ans = ans*<span class="number">10</span> + ord(str[pos])-ord(<span class="string">'0'</span>)</div><div class="line">                pos+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        ans = flag*ans</div><div class="line">        <span class="keyword">if</span> ans&lt;<span class="number">-2147483648</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-2147483648</span></div><div class="line">        <span class="keyword">elif</span> ans&gt;<span class="number">2147483647</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">2147483647</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-7" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>  flag=<span class="number">1</span> ,pos =<span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(str[pos]==<span class="string">' '</span>&amp;&amp; str[pos]!=<span class="string">'\0'</span>) pos++;</div><div class="line">        <span class="keyword">if</span> (str[pos]==<span class="string">'-'</span>) flag=<span class="number">-1</span>,pos++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos]==<span class="string">'+'</span>) pos++;</div><div class="line">        <span class="keyword">for</span>(; str[pos]!=<span class="string">'\0'</span>;pos++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (str[pos]&lt;=<span class="string">'9'</span>&amp;&amp;str[pos]&gt;=<span class="string">'0'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (flag==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    ans = ans*<span class="number">10</span> + (str[pos]-<span class="string">'0'</span>);</div><div class="line">                    <span class="keyword">if</span> (ans&gt;INT_MAX) <span class="keyword">return</span> INT_MAX;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    ans = ans*<span class="number">10</span> -(str[pos]-<span class="string">'0'</span>);</div><div class="line">                    <span class="keyword">if</span> (ans&lt;INT_MIN) <span class="keyword">return</span> INT_MIN;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="9palindrome-number"><a href="#9-Palindrome-Number" class="headerlink" title="9.Palindrome Number"></a>9.Palindrome Number</h1><p>给定一个整形数字，判断是否为回文，要求不能申请额外的空间，也就是空间复杂度是O（1）。</p>
<p>因为有空间要求，就不能转成字符串，然后反转看是否相等了。可以每次之比较开头和结尾，这样空间复杂度就是个常数。</p>
<h2 id="python"><a href="#Python-8" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> x&lt;<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        len = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span>(x/len&gt;=<span class="number">10</span>):</div><div class="line">            len*=<span class="number">10</span></div><div class="line">        <span class="keyword">while</span>(len&gt;<span class="number">1</span>):</div><div class="line">            left = x/len</div><div class="line">            right = x%<span class="number">10</span></div><div class="line">            <span class="keyword">if</span>(left!=right):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            x = (x%len)/<span class="number">10</span></div><div class="line">            len = len/<span class="number">100</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-8" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(x/len &gt;= <span class="number">10</span>)</div><div class="line">        &#123;</div><div class="line">            len*=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(; len&gt;<span class="number">1</span>;len=len/<span class="number">100</span>)</div><div class="line">        &#123;        </div><div class="line">            <span class="keyword">int</span> left = x/len;</div><div class="line">            <span class="keyword">int</span> right = x%<span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span>(left!=right) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            x=(x%len)/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="10regular-expression-matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10.Regular Expression Matching"></a>10.Regular Expression Matching</h1><p>实现正则表达，“*”表示匹配若干个和他其前面的字符相同的，“.”表示匹配该位置的任意字符。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">isMatch(&quot;aa&quot;,&quot;a&quot;) → false</div><div class="line">isMatch(&quot;aa&quot;,&quot;aa&quot;) → true</div><div class="line">isMatch(&quot;aaa&quot;,&quot;aa&quot;) → false</div><div class="line">isMatch(&quot;aa&quot;, &quot;a*&quot;) → true</div><div class="line">isMatch(&quot;aa&quot;, &quot;.*&quot;) → true</div><div class="line">isMatch(&quot;ab&quot;, &quot;.*&quot;) → true</div><div class="line">isMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → true</div></pre></td></tr></table></figure>
<h2 id="python"><a href="#Python-9" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type p: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">not</span> s</div><div class="line">        <span class="keyword">if</span>(len(p)&gt;<span class="number">1</span> <span class="keyword">and</span> p[<span class="number">1</span>]==<span class="string">'*'</span>):</div><div class="line">            <span class="keyword">if</span>(self.isMatch(s,p[<span class="number">2</span>:])):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            lens=len(s)</div><div class="line">            <span class="keyword">if</span> lens==<span class="number">0</span>:</div><div class="line">                <span class="keyword">return</span> self.isMatch(s,p[<span class="number">2</span>:])</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</div><div class="line">                <span class="keyword">if</span>(s[i]!=p[<span class="number">0</span>] <span class="keyword">and</span> p[<span class="number">0</span>]!=<span class="string">'.'</span>):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                <span class="keyword">elif</span>(self.isMatch(s[i+<span class="number">1</span>:],p[<span class="number">2</span>:])): </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span>((<span class="keyword">not</span> s) <span class="keyword">or</span> (s[<span class="number">0</span>]!=p[<span class="number">0</span>] <span class="keyword">and</span> p[<span class="number">0</span>]!=<span class="string">'.'</span>)):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> self.isMatch(s[<span class="number">1</span>:],p[<span class="number">1</span>:])</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-9" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span></span>&#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* a = s.c_str();</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* b = p.c_str();</div><div class="line">        <span class="keyword">return</span> isMatch(a,b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a, <span class="keyword">const</span> <span class="keyword">char</span>* b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a==<span class="literal">NULL</span>||b==<span class="literal">NULL</span>||*b==<span class="string">'*'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(*b==<span class="string">'\0'</span>) <span class="keyword">return</span> *a==<span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">if</span>(*(b+<span class="number">1</span>)==<span class="string">'*'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> lena = <span class="keyword">int</span>(<span class="built_in">strlen</span>(a));</div><div class="line">            <span class="keyword">if</span> (isMatch(a, b + <span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (*b != *(a + i) &amp;&amp; *b != <span class="string">'.'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">if</span> (isMatch(a + i + <span class="number">1</span>, b + <span class="number">2</span>))</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(*a==<span class="string">'\0'</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(*a==*b||*b==<span class="string">'.'</span>)</div><div class="line">                <span class="keyword">return</span> isMatch(a+<span class="number">1</span>,b+<span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不加这行，leetcode不给编译通过！</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="11-container-with-most-water"><a href="#11-Container-with-most-water" class="headerlink" title="11. Container with most water"></a>11. Container with most water</h1><p>给定n个坐标，横坐标是1,2,3…n，纵坐标大于等于零，每个坐标向下做垂线，把这些线看做木板，试求两个木板再加上x轴组成的水桶，得到最大的装水容量是多少。</p>
<p>这个我觉得是贪心，从左右两边向中间移动，移动的规则是每次移动较矮的边，因为它限制了当前的容量， 如果移动后能找到更高的，则有可能得到更大的容量。</p>
<h2 id="python"><a href="#Python-10" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type height: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        left=<span class="number">0</span></div><div class="line">        right=len(height)<span class="number">-1</span>;</div><div class="line">        contain = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span>(left!=right):</div><div class="line">            <span class="keyword">if</span>(height[left]&lt;height[right]):</div><div class="line">                temp = (right-left)*height[left]</div><div class="line">                <span class="keyword">if</span> temp&gt;contain:</div><div class="line">                    contain = temp</div><div class="line">                left+=<span class="number">1</span>   </div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp = (right-left)*height[right]</div><div class="line">                <span class="keyword">if</span> temp&gt;contain:</div><div class="line">                    contain = temp </div><div class="line">                right-=<span class="number">1</span></div><div class="line">        <span class="keyword">return</span> contain</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-10" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right = <span class="keyword">int</span>(height.size())<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> contains = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(left!=right)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (height[left]&lt;height[right])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = height[left] * (right-left);</div><div class="line">                <span class="keyword">if</span>(temp&gt;contains)</div><div class="line">                &#123;</div><div class="line">                    contains = temp;</div><div class="line">                &#125;</div><div class="line">                left++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = height[right]*(right-left);</div><div class="line">                <span class="keyword">if</span>(temp&gt;contains)</div><div class="line">                &#123;</div><div class="line">                    contains=temp;</div><div class="line">                &#125;</div><div class="line">                right--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> contains;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="12-integer-to-roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12 Integer to Roman"></a>12 Integer to Roman</h1><p>给定一个整数，转换成罗马数字，输入是1到3999。</p>
<p>I II III IV V VI VII VIII IX X   XI XII XIII XIV XV XVI XVII  XVIII XIX  XX </p>
<p>1 2 3 4  5  6   7   8   9 10 11 12 13  14  15  16   17   18   19    20 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I(1)，V(5)，X(10)，L(50)，C(100)，D(500)，M(1000)</div></pre></td></tr></table></figure>
<p>这道题不难，但是好麻烦啊，不想写PYTHON版本了。</p>
<h2 id="c"><a href="#C-11" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> ans = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> M = num/<span class="number">1000</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)</div><div class="line">            ans+=<span class="string">"M"</span>;</div><div class="line">        num = num%<span class="number">1000</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">900</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"CM"</span>;</div><div class="line">            num = num%<span class="number">900</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> D = num/<span class="number">500</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;D; i++)</div><div class="line">            ans+=<span class="string">"D"</span>;</div><div class="line">        num = num%<span class="number">500</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">400</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"CD"</span>;</div><div class="line">            num = num%<span class="number">400</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> C = num/<span class="number">100</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C; i++)</div><div class="line">            ans+=<span class="string">"C"</span>;</div><div class="line">        num = num%<span class="number">100</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">90</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"XC"</span>;</div><div class="line">            num = num%<span class="number">90</span>;</div><div class="line">        &#125;        </div><div class="line">        <span class="keyword">int</span> L = num/<span class="number">50</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;L; i++)</div><div class="line">            ans+=<span class="string">"L"</span>;</div><div class="line">        num = num%<span class="number">50</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">40</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"XL"</span>;</div><div class="line">            num = num%<span class="number">40</span>;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">int</span> X = num/<span class="number">10</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;X; i++)</div><div class="line">            ans+=<span class="string">"X"</span>;</div><div class="line">        num = num%<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">9</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"IX"</span>;</div><div class="line">            num = num%<span class="number">9</span>;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">int</span> V = num/<span class="number">5</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;V; i++)</div><div class="line">            ans+=<span class="string">"V"</span>;</div><div class="line">        num = num%<span class="number">5</span>;</div><div class="line">        <span class="keyword">if</span>(num/<span class="number">4</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=<span class="string">"IV"</span>;</div><div class="line">            num = num%<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> I = num/<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;I;i++)</div><div class="line">            ans+=<span class="string">"I"</span>;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有一个简单的写法，换Python实现一下。</p>
<h2 id="python"><a href="#Python-11" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type num: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        ans=<span class="string">''</span></div><div class="line">        one=[<span class="string">''</span>,<span class="string">'I'</span>,<span class="string">'II'</span>,<span class="string">'III'</span>,<span class="string">'IV'</span>,<span class="string">'V'</span>,<span class="string">'VI'</span>,<span class="string">'VII'</span>,<span class="string">'VIII'</span>,<span class="string">'IX'</span>]</div><div class="line">        ten = [<span class="string">''</span>,<span class="string">'X'</span>,<span class="string">'XX'</span>,<span class="string">'XXX'</span>,<span class="string">'XL'</span>,<span class="string">'L'</span>,<span class="string">'LX'</span>,<span class="string">'LXX'</span>,<span class="string">'LXXX'</span>,<span class="string">'XC'</span>]</div><div class="line">        hundred = [<span class="string">''</span>,<span class="string">'C'</span>,<span class="string">'CC'</span>,<span class="string">'CCC'</span>,<span class="string">'CD'</span>,<span class="string">'D'</span>,<span class="string">'DC'</span>,<span class="string">'DCC'</span>,<span class="string">'DCCC'</span>,<span class="string">'CM'</span>]</div><div class="line">        thousand = [<span class="string">''</span>,<span class="string">'M'</span>,<span class="string">'MM'</span>,<span class="string">'MMM'</span>]</div><div class="line">        rule = [one, ten, hundred, thousand]</div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> rule:</div><div class="line">            ans = t[num%<span class="number">10</span>]+ans</div><div class="line">            num = num/<span class="number">10</span></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h1 id="13-roman-to-integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h1><p>上一题的逆过程。</p>
<h2 id="c"><a href="#C-12" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span> roman[]=&#123;<span class="string">'I'</span>, <span class="string">'V'</span>, <span class="string">'X'</span>, <span class="string">'L'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'M'</span>&#125;;</div><div class="line">        <span class="keyword">int</span> integer[]=&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">1000</span>&#125;;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; roman2int; </div><div class="line">        <span class="keyword">int</span> maplen = <span class="keyword">sizeof</span>(roman)/<span class="keyword">sizeof</span>(<span class="keyword">char</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maplen; ++i)</div><div class="line">        &#123;</div><div class="line">            roman2int.insert(<span class="built_in">std</span>::pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(roman[i],integer[i]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> present = roman2int[s[i]];</div><div class="line">            <span class="keyword">int</span> next = roman2int[s[i+<span class="number">1</span>]];</div><div class="line">            <span class="keyword">if</span>(present&lt;next)</div><div class="line">                sum-=roman2int[s[i]];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                sum+=roman2int[s[i]];</div><div class="line">        &#125;</div><div class="line">        sum+=roman2int[s[s.length()<span class="number">-1</span>]];</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="python"><a href="#Python-12" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        roman = [<span class="string">'I'</span>, <span class="string">'V'</span>, <span class="string">'X'</span>, <span class="string">'L'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'M'</span>]</div><div class="line">        integer = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">1000</span>]</div><div class="line">        r2i=&#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(integer)):</div><div class="line">            r2i[roman[i]]=integer[i]</div><div class="line">        sum=<span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span>(r2i[s[i]]&lt;r2i[s[i+<span class="number">1</span>]]):</div><div class="line">                sum-=r2i[s[i]]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                sum+=r2i[s[i]]</div><div class="line">        sum+=r2i[s[<span class="number">-1</span>]]</div><div class="line">        <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
<h1 id="14-longest-common-prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a>14. Longest Common Prefix</h1><p>给定一组string，寻找他们的最长公共前缀。</p>
<h1 id="15-3sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h1><p>给定一个数组，返回所有满足a+b+c=0的三元组，注意返回的元素彼此不能重复。</p>
<p>简单的思路是结合第一题，对数组中每个数字都进行一次TwoSum，寻找所有其他两个数之和是本数字的相反数，tip是先做好排序，然后当前数字统计好三元组后，下一个数字如果重复就可以跳过。同样，在统计二元组的子函数中，如果下个数字对和当前已经匹配了的数字对相同，也可以跳过，这样就能加快计算。</p>
<h2 id="python"><a href="#Python-13" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self,nums,target)</span>:</span></div><div class="line">        L = <span class="number">0</span></div><div class="line">        R = len(nums)<span class="number">-1</span></div><div class="line">        ans = []</div><div class="line">        <span class="keyword">while</span> L&lt;R:</div><div class="line">            temp = nums[L]+nums[R]+target</div><div class="line">            <span class="keyword">if</span> temp==<span class="number">0</span>:</div><div class="line">                ans.append([nums[L],nums[R],target])</div><div class="line">                L+=<span class="number">1</span></div><div class="line">                R-=<span class="number">1</span></div><div class="line">                <span class="keyword">while</span> L&lt;R <span class="keyword">and</span> nums[L<span class="number">-1</span>]==nums[L]:L+=<span class="number">1</span></div><div class="line">                <span class="keyword">while</span> L&lt;R <span class="keyword">and</span> nums[R+<span class="number">1</span>]==nums[R]:R-=<span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> temp&gt;<span class="number">0</span>:</div><div class="line">                R-=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                L+=<span class="number">1</span></div><div class="line">        <span class="keyword">return</span> ans</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        nums.sort()</div><div class="line">        ans = []</div><div class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums) :</div><div class="line">            <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]: <span class="keyword">continue</span></div><div class="line">            temp = self.twoSum(nums[i+<span class="number">1</span>:],num)</div><div class="line">            ans.extend(temp)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="c"><a href="#C-13" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</div><div class="line">    &#123;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; results;</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>(nums.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]==nums[i<span class="number">-1</span>] &amp;&amp; i != <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> L = i+<span class="number">1</span> ;</div><div class="line">            <span class="keyword">int</span> R = n<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(L&lt;R)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> ans = nums[L]+nums[R]+nums[i];</div><div class="line">                <span class="keyword">if</span>(ans == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">                    result.push_back(nums[L]);</div><div class="line">                    result.push_back(nums[i]);</div><div class="line">                    result.push_back(nums[R]);</div><div class="line">                    results.push_back(result);</div><div class="line">                    L++;</div><div class="line">                    R--;</div><div class="line">                    <span class="keyword">while</span>(L&lt;R &amp;&amp; nums[L] == nums[L<span class="number">-1</span>]) L++;</div><div class="line">                    <span class="keyword">while</span>(R&gt;L &amp;&amp; nums[R] == nums[R+<span class="number">1</span>]) R--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ans&gt;<span class="number">0</span>) R=R<span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span> L=L+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="16-threesumclosest"><a href="#16-ThreeSumClosest" class="headerlink" title="16 ThreeSumClosest"></a>16 ThreeSumClosest</h1><p>给定一个数组和一个目标值，返回数组中三个数的加和，满足这个加和是最接近目标值的。</p>
<p>##C++</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>(nums.size());</div><div class="line">        <span class="keyword">int</span> result = nums[n<span class="number">-1</span>]+ nums[n<span class="number">-3</span>]+nums[n<span class="number">-2</span>];</div><div class="line">        <span class="keyword">int</span> diff = nums[n<span class="number">-1</span>]+ nums[n<span class="number">-3</span>]+nums[n<span class="number">-2</span>]-target;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> L = i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> R = n<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(L&lt;R)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[L]+nums[i]+nums[R];</div><div class="line">                <span class="keyword">int</span> temp = sum-target;</div><div class="line">                <span class="keyword">if</span> (temp==<span class="number">0</span>) <span class="keyword">return</span> target;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (temp&gt;<span class="number">0</span>) R--;</div><div class="line">                <span class="keyword">else</span> L++;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(temp)&lt;<span class="built_in">abs</span>(diff)) &#123;</div><div class="line">                    diff = temp;</div><div class="line">                    result = sum;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="17-letter-combinations-of-a-phone-number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17 Letter Combinations of a Phone Number"></a>17 Letter Combinations of a Phone Number</h1><p>给定一个数字字符串如“234”，返回手机按键对应的所有可能的字母组合</p>
<h2 id="c"><a href="#C-14" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; prepare() &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; dict;</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'2'</span>, <span class="string">"abc"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'3'</span>, <span class="string">"def"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'4'</span>, <span class="string">"ghi"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'5'</span>, <span class="string">"jkl"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'6'</span>, <span class="string">"mno"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'7'</span>, <span class="string">"pqrs"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'8'</span>, <span class="string">"tuv"</span>));</div><div class="line">        dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;(<span class="string">'9'</span>, <span class="string">"wxyz"</span>));</div><div class="line">        <span class="keyword">return</span> dict;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; results;</div><div class="line">        <span class="keyword">if</span> (digits.length()==<span class="number">0</span>) <span class="keyword">return</span> results;</div><div class="line">        results.push_back(<span class="string">""</span>);</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>(digits.length());</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; dict=prepare();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; temp;</div><div class="line">            <span class="keyword">char</span> num = digits[i];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;results.size();j++) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;dict[num].length(); k++) &#123;</div><div class="line">                    temp.push_back(results[j]+dict[num][k]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            results = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="18-4sum"><a href="#18-4Sum" class="headerlink" title="18 4Sum"></a>18 4Sum</h1><p>给定一个数组，和一个目标值，寻找数组中所有满足四个数之和等于目标值的组合并返回。</p>
<p>思路是和2Sum，3Sum类似，只不过遍历的时候用两重循环固定前两个值，然后用双指针遍历查找满足条件的组合，tips是先排序，且重复项跳过，再有就是如果最大的四个加起来还不够，就continue。</p>
<h2 id="c"><a href="#C-15" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</div><div class="line">    &#123;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; results;</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>(nums.size());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]==nums[i<span class="number">-1</span>] &amp;&amp; i!=<span class="number">0</span>) <span class="keyword">continue</span>; </div><div class="line">            <span class="keyword">if</span> (nums[i]+nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]+nums[i+<span class="number">3</span>]&gt;target) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (nums[i]+nums[n<span class="number">-3</span>]+nums[n<span class="number">-2</span>]+nums[n<span class="number">-1</span>]&lt;target) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]==nums[j<span class="number">-1</span>] &amp;&amp; j!=(i+<span class="number">1</span>)) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> L = j+<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> R = n<span class="number">-1</span>;</div><div class="line">                <span class="keyword">while</span>(L&lt;R)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> sum = nums[i]+nums[j]+nums[L]+nums[R];</div><div class="line">                    <span class="keyword">if</span> (sum == target)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">int</span> ans[] = &#123;nums[i],nums[j],nums[L],nums[R]&#125;;</div><div class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(begin(ans),end(ans));</div><div class="line">                        results.push_back(result);</div><div class="line">                        L++;</div><div class="line">                        R--;</div><div class="line">                        <span class="keyword">while</span>(L&lt;R &amp;&amp; nums[L]==nums[L<span class="number">-1</span>]) L++;</div><div class="line">                        <span class="keyword">while</span>(L&lt;R &amp;&amp; nums[R]==nums[R+<span class="number">1</span>]) R--;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sum&lt;target) L++;</div><div class="line">                    <span class="keyword">else</span> R--;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="19-remove-nth-node-from-end-of-list"><a href="#19-Remove-Nth-Node-from-End-of-List" class="headerlink" title="19 Remove Nth Node from End of List"></a>19 Remove Nth Node from End of List</h1><p>先统计一下链表长度，然后知道该去除的是第几个节点，然后从链表头开始查，查到要去除的节点就跳过去(把next指针修改成next的next)</p>
<h2 id="c"><a href="#C-16" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; store_p;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; store_v;</div><div class="line">        ListNode* ans = head;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (ans-&gt;next!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            ans = ans-&gt;next;</div><div class="line">            num++;</div><div class="line">        &#125;</div><div class="line">      	<span class="comment">//下表是expect的节点要跳过</span></div><div class="line">        <span class="keyword">int</span> expect = num-n;</div><div class="line">        ListNode* temp = head;</div><div class="line">        <span class="keyword">if</span> (expect == <span class="number">0</span>) <span class="keyword">return</span> head-&gt;next;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i!=expect) &#123;</div><div class="line">                temp = temp-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                temp-&gt;next = temp-&gt;next-&gt;next;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="20-valid-parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20 Valid Parentheses"></a>20 Valid Parentheses</h1><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p>
<h2 id="c"><a href="#C-17" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; store ;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>&amp; c : s) &#123;</div><div class="line">            <span class="keyword">switch</span>(c) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'['</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>: store.push(c); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span> (store.empty()||store.top()!=<span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> store.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span> (store.empty()||store.top()!=<span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> store.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span> (store.empty()||store.top()!=<span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> store.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> store.empty();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Two-Sum&quot;&gt;&lt;a href=&quot;#1-Two-Sum&quot; class=&quot;headerlink&quot; title=&quot;1. Two Sum&quot;&gt;&lt;/a&gt;1. Two Sum&lt;/h1&gt;&lt;p&gt;相似题目：15、16、18&lt;/p&gt;
&lt;p&gt;给定一个数组，在输入一个指定的目标值后，返回数组中相加等于目标值的两个元素的下标。&lt;/p&gt;
&lt;p&gt;可以假定每个输入都有一个解，并且不能重复使用同一个的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://github.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://github.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://github.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo!</title>
    <link href="http://github.com/2017/01/19/%E4%BD%A0%E5%A5%BD%EF%BC%8CHEXO/"/>
    <id>http://github.com/2017/01/19/你好，HEXO/</id>
    <published>2017-01-19T11:58:50.000Z</published>
    <updated>2017-03-26T08:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>你好，欢迎来到我的技术博客，下面是本文的目录。</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>建这个博客的目的，目前有这么几点：记录LeetCode心得体会、记录DeepLearning和其他机器学习方法的知识总结。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h2><p>PS：讲真，md的语法我现在还是一脸懵逼 = =，好难啊，不过既然开始了就要坚持下去。$a^1+2=3$</p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><img src="https://ww1.sinaimg.cn/large/006y8lValy1fbzuaste9aj30j60asjsc.jpg" alt=""></p>
<h2 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h2><p>$$<br>e=m_2c^2<br>$$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>command+alt+c</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello world!"</span>)</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>command+T</p>
<table>
<thead>
<tr>
<th>我是表格</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>哈哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，欢迎来到我的技术博客，下面是本文的目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="2017寒假" scheme="http://github.com/tags/2017%E5%AF%92%E5%81%87/"/>
    
  </entry>
  
</feed>
